"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[2463],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>h});var n=i(67294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(i),h=a,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return i?n.createElement(m,r(r({ref:t},d),{},{components:i})):n.createElement(m,r({ref:t},d))}));function h(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<o;p++)r[p]=i[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},65043:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=i(87462),a=(i(67294),i(3905));const o={},r="Concentrated Liquidity",s={unversionedId:"modules/concentrated-liquidity/README",id:"modules/concentrated-liquidity/README",title:"Concentrated Liquidity",description:"Background",source:"@site/docs/osmosis-core/modules/concentrated-liquidity/README.md",sourceDirName:"modules/concentrated-liquidity",slug:"/modules/concentrated-liquidity/",permalink:"/osmosis-core/modules/concentrated-liquidity/",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/osmosis-core/modules/concentrated-liquidity/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/osmosis-core/modules/"},next:{title:"CosmWasm Pool",permalink:"/osmosis-core/modules/cosmwasmpool/"}},l={},p=[{value:"Background",id:"background",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Ticks",id:"ticks",level:2},{value:"Context",id:"context",level:3},{value:"Geometric Tick Spacing with Additive Ranges",id:"geometric-tick-spacing-with-additive-ranges",level:3},{value:"Formulas",id:"formulas",level:3},{value:"Tick Spacing Example: Tick to Price",id:"tick-spacing-example-tick-to-price",level:3},{value:"Tick Spacing Example: Price to Tick",id:"tick-spacing-example-price-to-tick",level:3},{value:"Choosing an Exponent At Price One Value",id:"choosing-an-exponent-at-price-one-value",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Consequences",id:"consequences",level:3},{value:"Concentrated Liquidity Module Messages",id:"concentrated-liquidity-module-messages",level:2},{value:"<code>MsgCreatePosition</code>",id:"msgcreateposition",level:3},{value:"<code>MsgWithdrawPosition</code>",id:"msgwithdrawposition",level:3},{value:"<code>MsgCreatePool</code>",id:"msgcreatepool",level:3},{value:"<code>MsgCollectSpreadRewards</code>",id:"msgcollectspreadrewards",level:3},{value:"<code>MsgFungifyChargedPositions</code>",id:"msgfungifychargedpositions",level:3},{value:"Relationship to Pool Manager Module",id:"relationship-to-pool-manager-module",level:2},{value:"Pool Creation",id:"pool-creation",level:3},{value:"Swaps",id:"swaps",level:3},{value:"Liquidity Provision",id:"liquidity-provision",level:2},{value:"Adding Liquidity",id:"adding-liquidity",level:3},{value:"Removing Liquidity",id:"removing-liquidity",level:3},{value:"Swapping",id:"swapping",level:2},{value:"Calculating Swap Amounts",id:"calculating-swap-amounts",level:3},{value:"Migration",id:"migration",level:2},{value:"Superfluid Delegated Balancer to Concentrated",id:"superfluid-delegated-balancer-to-concentrated",level:3},{value:"Superfluid Undelegating Balancer to Concentrated",id:"superfluid-undelegating-balancer-to-concentrated",level:3},{value:"Locked and Unlocked Balancer to Concentrated",id:"locked-and-unlocked-balancer-to-concentrated",level:3},{value:"Balancer to Concentrated with No Lock",id:"balancer-to-concentrated-with-no-lock",level:3},{value:"Position Fungification",id:"position-fungification",level:2},{value:"Swapping. Appendix A: Example",id:"swapping-appendix-a-example",level:2},{value:"Range Orders",id:"range-orders",level:2},{value:"Spread Rewards",id:"spread-rewards",level:2},{value:"Collecting Spread Rewards",id:"collecting-spread-rewards",level:2},{value:"Swaps",id:"swaps-1",level:2},{value:"Swap Step Spread Factors",id:"swap-step-spread-factors",level:2},{value:"Incentive/Liquidity Mining Mechanism",id:"incentiveliquidity-mining-mechanism",level:2},{value:"Overview",id:"overview",level:2},{value:"Target Properties",id:"target-properties",level:2},{value:"Liquidity Depth",id:"liquidity-depth",level:3},{value:"Liquidity Breadth",id:"liquidity-breadth",level:3},{value:"Liquidity Uptime",id:"liquidity-uptime",level:3},{value:"Current Standard: Pro-rata in Active Tick",id:"current-standard-pro-rata-in-active-tick",level:2},{value:"Our Implementation",id:"our-implementation",level:2},{value:"Note on supported and authorized uptimes",id:"note-on-supported-and-authorized-uptimes",level:3},{value:"Incentive Creation and Querying",id:"incentive-creation-and-querying",level:3},{value:"Reward Splitting Between Classic and CL pools",id:"reward-splitting-between-classic-and-cl-pools",level:3},{value:"TWAP Integration",id:"twap-integration",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Listeners",id:"listeners",level:2},{value:"<code>AfterConcentratedPoolCreated</code>",id:"afterconcentratedpoolcreated",level:3},{value:"<code>AfterInitialPoolPositionCreated</code>",id:"afterinitialpoolpositioncreated",level:3},{value:"<code>AfterLastPoolPositionRemoved</code>",id:"afterlastpoolpositionremoved",level:3},{value:"<code>AfterConcentratedPoolSwap</code>",id:"afterconcentratedpoolswap",level:3},{value:"State entries and KV store management",id:"state-entries-and-kv-store-management",level:3},{value:"State and Keys",id:"state-and-keys",level:2},{value:"Incentive Records",id:"incentive-records",level:3},{value:"Precision Issues With Price",id:"precision-issues-with-price",level:2},{value:"Solution",id:"solution",level:3},{value:"Terminology",id:"terminology",level:2},{value:"External Sources",id:"external-sources",level:2}],d={toc:p};function c(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"concentrated-liquidity"},"Concentrated Liquidity"),(0,a.kt)("h2",{id:"background"},"Background"),(0,a.kt)("p",null,"Concentrated liquidity is a novel Automated Market Maker (AMM) design introduced\nby Uniswap that allows for more efficient use of capital. The improvement is\nachieved by providing liquidity in specific price ranges chosen by the user."),(0,a.kt)("p",null,"For instance, a pool with stablecoin pairs like USDC/USDT has a spot price that\nshould always be trading near 1. As a result, Liquidity Providers (LPs) can\nfocus their capital in a small range around 1, rather than the full range from 0\nto infinity. This approach leads to an average of 200-300x higher capital\nefficiency. Moreover, traders benefit from lower price impact because the pool\nincentivizes greater depth around the current price."),(0,a.kt)("p",null,"Concentrated liquidity also opens up new opportunities for providing liquidity\nrewards to desired strategies. For example, it's possible to incentivize LPs\nbased on their position's proximity to the current price and the time spent\nwithin that position. This design also allows for a new \"range order\" type,\nsimilar to a limit order with order-books."),(0,a.kt)("h2",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,"The traditional Balancer AMM relies on the following curve that tracks current reserves:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-1",src:i(39161).Z,width:"1604",height:"122"})),(0,a.kt)("p",null,"This formula allows for distributing liquidity along the $xy=k$ curve and across\nthe entire price range of (0, ","\u221e",")."),(0,a.kt)("p",null,"With the new architecture, we introduce the concept of a ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," that allows\nusers to concentrate liquidity within a fixed range. A position only needs to\nmaintain enough reserves to satisfy trading within this range. Consequently,\nit functions as the traditional ",(0,a.kt)("inlineCode",{parentName:"p"},"xy = k")," within that range."),(0,a.kt)("p",null,"In the new architecture, real reserves are described by the following formula:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-2",src:i(69092).Z,width:"1432",height:"108"})),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"P_l")," is the lower tick, ",(0,a.kt)("inlineCode",{parentName:"p"},"P_u")," is the upper tick, and ",(0,a.kt)("inlineCode",{parentName:"p"},"L")," is the amount\nof liquidity provided,\n",(0,a.kt)("img",{alt:"eq-4",src:i(5784).Z,width:"1534",height:"124"})),(0,a.kt)("p",null,"This formula stems from the original $xy = k$ but with a limited range. In the\ntraditional design, a pool's ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," tokens are tracked directly. However,\nwith the concentrated design, we only track $L$ and $\\sqrt P$, which can be\ncalculated with:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-5",src:i(36172).Z,width:"1436",height:"260"})),(0,a.kt)("p",null,"By rearranging the above, we obtain the following formulas to track virtual reserves:\n",(0,a.kt)("img",{alt:"eq-6",src:i(2753).Z,width:"1544",height:"256"})),(0,a.kt)("p",null,"Note the square root around price. By tracking it this way, we can utilize the\nfollowing core property of the architecture:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-7",src:i(54695).Z,width:"1492",height:"136"})),(0,a.kt)("p",null,"Since only one of the following changes at a time:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"$L$: When an LP adds or removes liquidity"),(0,a.kt)("li",{parentName:"ul"},"sqrt P: When a trader swaps")),(0,a.kt)("p",null,"We can use the above relationship to calculate the outcome of swaps as well as\npool joins that mint shares."),(0,a.kt)("p",null,"Conversely, we calculate liquidity from the other token in the pool:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-8",src:i(28204).Z,width:"1436",height:"168"})),(0,a.kt)("p",null,"Overall, the architecture's goal is to enable LPs to provide concentrated\nliquidity within a specific range while maintaining high capital efficiency."),(0,a.kt)("h2",{id:"ticks"},"Ticks"),(0,a.kt)("h3",{id:"context"},"Context"),(0,a.kt)("p",null,"In Uniswap V3, discrete points (called ticks) are used when providing liquidity\nin a concentrated liquidity pool."),(0,a.kt)("p",null,"The price ","[p]"," corresponding to a tick ","[t]"," is defined by the equation:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-9",src:i(69793).Z,width:"1438",height:"80"})),(0,a.kt)("p",null,"This results in a .01% difference between adjacent tick prices. This does not,\nhowever, allow for control over the specific prices that the ticks correspond\nto. For example, if a user wants to make a limit order at the $17,100.50 price point,\nthey would have to interact with either tick 97473 (corresponding to price\n$17,099.60) or tick 97474 (price $17101.30)."),(0,a.kt)("p",null,'Since we know what range a pair will generally trade in, how can we provide more\ngranularity at that range and provide a more optimal price range between ticks\ninstead of the "one-size-fits-all" approach explained above?'),(0,a.kt)("h3",{id:"geometric-tick-spacing-with-additive-ranges"},"Geometric Tick Spacing with Additive Ranges"),(0,a.kt)("p",null,"In Osmosis' implementation of concentrated liquidity, we will instead make use\nof geometric tick spacing with additive ranges."),(0,a.kt)("p",null,"We start by defining an exponent for the precision factor of each incremental\ntick starting at the spot price of one. This is referred to as $exponentAtPriceOne$."),(0,a.kt)("p",null,"In the current design, we hardcode $exponentAtPriceOne$ as -6. When used with a\ntick spacing of 100, this effectively acts as an $exponentAtPriceOne$ of -4,\nsince only every 100 ticks are able to be initialized."),(0,a.kt)("p",null,"When $exponentAtPriceOne = -6$ (and tick spacing is 100), each tick starting at\n0 and ending at the first factor of 10 will represents a spot price increase of 0.0001:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"tick_{0} = 1"),(0,a.kt)("li",{parentName:"ul"},"tick_{100} = 1.0001"),(0,a.kt)("li",{parentName:"ul"},"tick_{200} = 1.0002"),(0,a.kt)("li",{parentName:"ul"},"tick_{300} = 1.0003")),(0,a.kt)("p",null,"This continues until the pool reaches a spot price of 10. At this point, since\nthe pool has increased by a factor of 10, the $exponentAtCurrentTick$ increases\nfrom -4 to -3 (decreasing the incremental precision), and the ticks will\nincrease as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"tick_{8999900} =  9.9999"),(0,a.kt)("li",{parentName:"ul"},"tick_{9000000} = 10.000"),(0,a.kt)("li",{parentName:"ul"},"tick_{9000100} = 10.001"),(0,a.kt)("li",{parentName:"ul"},"tick_{9000200} = 10.002")),(0,a.kt)("p",null,"For spot prices less than a dollar, the precision factor decreases\n(increasing the incremental precision) at every factor of 10:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"tick_{-100} = 0.99999"),(0,a.kt)("li",{parentName:"ul"},"tick_{-200} = 0.99998"),(0,a.kt)("li",{parentName:"ul"},"tick_{-500100} = 0.94999"),(0,a.kt)("li",{parentName:"ul"},"tick_{-500200} = 0.94998"),(0,a.kt)("li",{parentName:"ul"},"tick_{-9000100} = 0.099999"),(0,a.kt)("li",{parentName:"ul"},"tick_{-9000200} = 0.099998")),(0,a.kt)("p",null,"This goes on in the negative direction until it reaches a spot price of\n0.000000000000000001 or in the positive direction until it reaches a spot\nprice of 100000000000000000000000000000000000000."),(0,a.kt)("p",null,"The minimum spot price was chosen as this is the smallest possible number\nsupported by the sdk.Dec type. As for the maximum spot price, the above number\nwas based on gamm's max spot price of 340282366920938463463374607431768211455.\nWhile these numbers are not the same, the max spot price used in concentrated\nliquidity utilizes the same number of significant figures as gamm's max spot\nprice and is less than gamm's max spot price which satisfies the initial design requirements."),(0,a.kt)("h3",{id:"formulas"},"Formulas"),(0,a.kt)("p",null,"After we define tick spacing (which effectively defines the $exponentAtPriceOne$,\nsince $exponentAtPriceOne$ is fixed), we can then calculate how many ticks must\nbe crossed in order for $k$ to be incremented\n( $geometricExponentIncrementDistanceInTicks$ )."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-10",src:i(70202).Z,width:"1626",height:"140"})),(0,a.kt)("p",null,"Since we define exponentAtPriceOne and utilize this as the increment starting\npoint instead of price zero, we must multiply the result by 9 as shown above.\nIn other words, starting at 1, it takes 9 ticks to get to the first power of 10.\nThen, starting at 10, it takes 9","*","10 ticks to get to the next power of 10, etc."),(0,a.kt)("p",null,"Now that we know how many ticks must be crossed in order for our\nexponentAtPriceOne to be incremented, we can then figure out what our change\nin exponentAtPriceOne will be based on what tick is being traded at:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-11",src:i(7841).Z,width:"1862",height:"114"})),(0,a.kt)("p",null,"With geometricExponentDelta and ",(0,a.kt)("em",{parentName:"p"},"exponentAtPriceOne"),", we can figure out what\nthe ",(0,a.kt)("em",{parentName:"p"},"exponentAtPriceOne")," value we will be at when we reach the provided tick:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-13",src:i(10883).Z,width:"1452",height:"176"})),(0,a.kt)("p",null,"Knowing what our ",(0,a.kt)("em",{parentName:"p"},"exponentAtCurrentTick")," is, we must then figure out what power\nof 10 this $exponentAtPriceOne$ corresponds to (by what number does the price\ngets incremented with each new tick):"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-12",src:i(78042).Z,width:"1484",height:"126"})),(0,a.kt)("p",null,"Lastly, we must determine how many ticks above the current increment we are at:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-14",src:i(47283).Z,width:"2374",height:"138"})),(0,a.kt)("p",null,"With this, we can determine the price:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-15",src:i(57170).Z,width:"2144",height:"96"})),(0,a.kt)("p",null,"where (10^{geometricExponentDelta}) is the price after $geometricExponentDelta$\nincrements of ",(0,a.kt)("em",{parentName:"p"},"exponentAtPriceOne")," (which is basically the number of decrements\nof difference in price between two adjacent ticks by the power of 10)"),(0,a.kt)("h3",{id:"tick-spacing-example-tick-to-price"},"Tick Spacing Example: Tick to Price"),(0,a.kt)("p",null,"Bob sets a limit order on the ",(0,a.kt)("inlineCode",{parentName:"p"},"USD<>BTC")," pool at tick 36650010. This pool's\n$exponentAtPriceOne$ is -6. What price did Bob set his limit order at?"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-16",src:i(8673).Z,width:"2564",height:"364"})),(0,a.kt)("p",null,"Bob set his limit order at price $16,500.10"),(0,a.kt)("h3",{id:"tick-spacing-example-price-to-tick"},"Tick Spacing Example: Price to Tick"),(0,a.kt)("p",null,"Bob sets a limit order on the ",(0,a.kt)("inlineCode",{parentName:"p"},"USD<>BTC")," pool at price $16,500.10. This pool's\n$exponentAtPriceOne$ is -6. What tick did Bob set his limit order at?"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-17",src:i(81788).Z,width:"1710",height:"120"})),(0,a.kt)("p",null,"We must loop through increasing exponents until we find the first exponent that\nis greater than or equal to the desired price"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-18",src:i(69323).Z,width:"3110",height:"414"})),(0,a.kt)("p",null,"10 is less than 16,500.10, so we must increase our exponent and try again"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-19",src:i(90838).Z,width:"3098",height:"318"})),(0,a.kt)("p",null,"100 is less than 16,500.10, so we must increase our exponent and try again.\nThis goes on until..."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-20",src:i(72576).Z,width:"2902",height:"290"})),(0,a.kt)("p",null,"100000 is greater than 16,500.10. This means we must now find out how many\nadditive tick in the currentAdditiveIncrementInTicks of -2 we must pass in\norder to reach 16,500.10."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-21",src:i(52532).Z,width:"2770",height:"168"})),(0,a.kt)("p",null,"Bob set his limit order at tick 36650010"),(0,a.kt)("h2",{id:"choosing-an-exponent-at-price-one-value"},"Choosing an Exponent At Price One Value"),(0,a.kt)("p",null,"The creator of a pool cannot choose an exponenetAtPriceOne as one of the input\nparameters since it is hard coded to -6. The number can be psedo-controlled by\nchoosing the tick spacing a pool is initialized with. For example, if a pool\nis desired to have an exponentAtPriceOne of -6, the pool creator can choose a\ntick spacing of 1. If a pool is desired to have an exponentAtPriceOne of -4,\nthis is two factors of 10 greater than -6, so the pool creator can choose a\ntick spacing of 100 to achieve this level of precision."),(0,a.kt)("p",null,"As explained previously, the exponent at price one determines how much the spot\nprice increases or decreases when traversing ticks. The following equation will\nassist in selecting this value:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-22",src:i(97203).Z,width:"2512",height:"322"})),(0,a.kt)("h3",{id:"example-1"},"Example 1"),(0,a.kt)("p",null,"SHIB is trading at $0.00001070 per SHIB\nBTC is trading at $28,000 per BTC"),(0,a.kt)("p",null,"We want to create a SHIB/BTC concentrated liquidity pool where SHIB is the\nbaseAsset (asset0) and BTC is the quoteAsset (asset1). In terms of the quoteAsset,\nwe want to increment in 10 cent values.\n",(0,a.kt)("img",{alt:"eq-23",src:i(28072).Z,width:"2542",height:"378"})),(0,a.kt)("p",null,"We can therefore conclude that we can use an exponent at price one of -5\n(slightly under precise) or -6 (slightly over precise) for this base/quote pair\nand desired price granularity. This means we would either want a tick spacing of 1\n(to have an exponent at price one of -6) or 10 (to have an exponent at price one of -5)."),(0,a.kt)("h3",{id:"example-2"},"Example 2"),(0,a.kt)("p",null,"Flipping the quoteAsset/baseAsset, for BTC/SHIB, lets determine what the\nexponentAtPriceOne should be. For SHIB as a quote, centralized exchanges\nlist prices at the 10^-8, so we will set our desired increment to this value."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"eq-24",src:i(75673).Z,width:"2528",height:"374"})),(0,a.kt)("p",null,"We can therefore conclude that we can use an exponent at price one of -3\nfor this base/quote pair and desired price granularity. This means we would\nwant a tick spacing of 1000 (to have an exponent at price one of -3)."),(0,a.kt)("h3",{id:"consequences"},"Consequences"),(0,a.kt)("p",null,"This decision allows us to define ticks at spot prices that users actually\ndesire to trade on, rather than arbitrarily defining ticks at .01% distance\nbetween each other. This will also make integration with UX seamless,\ninstead of either:"),(0,a.kt)("p",null,"a) Preventing trade at a desirable spot price or\nb) Having the front end round the tick's actual price to the nearest\nhuman readable/desirable spot price"),(0,a.kt)("p",null,"One side effect of increasing precision as we get closer to the minimum tick\nis that multiple ticks can represent the same price. For example, tick\n-161795100 (along with the ticks surrounding it) correlate to a price\nof 0.000000000000000002. To get around any issues this may cause, when a\nposition is created with a user defined lower and upper tick, we determine\nif a larger tick exists that represents the same price. If so, we use that tick\ninstead of the user defined tick. In the above example, the tick would be\nchanged to -161000000, which is the first tick that represents the same price."),(0,a.kt)("h2",{id:"concentrated-liquidity-module-messages"},"Concentrated Liquidity Module Messages"),(0,a.kt)("h3",{id:"msgcreateposition"},(0,a.kt)("inlineCode",{parentName:"h3"},"MsgCreatePosition")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Request"))),(0,a.kt)("p",null,"This message allows LPs to provide liquidity between ",(0,a.kt)("inlineCode",{parentName:"p"},"LowerTick")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"UpperTick"),"\nin a given ",(0,a.kt)("inlineCode",{parentName:"p"},"PoolId"),". The user provides the amount of each token desired. Since\nLPs are only allowed to provide liquidity proportional to the existing reserves,\nthe actual amount of tokens used might differ from requested. As a result, LPs\nmay also provide the minimum amount of each token to be used so that the system fails\nto create position if the desired amounts cannot be satisfied."),(0,a.kt)("p",null,"Three KV stores are initialized when a position is created:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Position ID -> Position")," - This is a mapping from a unique position ID to a\nposition object. The position ID is a monotonically increasing integer that is\nincremented every time a new position is created."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Owner | Pool ID | Position ID -> Position ID")," - This is a mapping from a\ncomposite key of the owner address, pool ID, and position ID to the position ID.\nThis is used to keep track of all positions owned by a given owner in a given pool."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Pool ID -> Position ID")," - This is a mapping from a pool ID to a position ID.\nThis is used to keep track of all positions in a given pool.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgCreatePosition struct {\n PoolId          uint64\n Sender          string\n LowerTick       int64\n UpperTick       int64\n TokenDesired0   types.Coin\n TokenDesired1   types.Coin\n TokenMinAmount0 github_com_cosmos_cosmos_sdk_types.Int\n TokenMinAmount1 github_com_cosmos_cosmos_sdk_types.Int\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Response"))),(0,a.kt)("p",null,"On successful response, we receive the actual amounts of each token used to\ncreate the liquidityCreated number of shares in the given range."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgCreatePositionResponse struct {\n PositionId  uint64\n Amount0 github_com_cosmos_cosmos_sdk_types.Int\n Amount1 github_com_cosmos_cosmos_sdk_types.Int\n JoinTime google.protobuf.Timestamp\n LiquidityCreated github_com_cosmos_cosmos_sdk_types.Dec\n\n}\n")),(0,a.kt)("p",null,"This message should call the ",(0,a.kt)("inlineCode",{parentName:"p"},"createPosition")," keeper method that is introduced\nin the ",(0,a.kt)("inlineCode",{parentName:"p"},'"Liquidity Provision"')," section of this document."),(0,a.kt)("h3",{id:"msgwithdrawposition"},(0,a.kt)("inlineCode",{parentName:"h3"},"MsgWithdrawPosition")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Request"))),(0,a.kt)("p",null,"This message allows LPs to withdraw their position via their position ID,\npotentially in partial amount of liquidity. It should fail if the position ID\ndoes not exist or if attempting to withdraw an amount higher than originally\nprovided. If an LP withdraws all of their liquidity from a position, then the\nposition is deleted from state along with the three KV stores that were\ninitialized in the ",(0,a.kt)("inlineCode",{parentName:"p"},"MsgCreatePosition")," section. However, the spread factor accumulators\nassociated with the position are still retained until a user claims them manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgWithdrawPosition struct {\n PositionId      uint64\n Sender          string\n LiquidityAmount github_com_cosmos_cosmos_sdk_types.Dec\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Response"))),(0,a.kt)("p",null,"On successful response, we receive the amounts of each token withdrawn\nfor the provided share liquidity amount."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgWithdrawPositionResponse struct {\n Amount0 github_com_cosmos_cosmos_sdk_types.Int\n Amount1 github_com_cosmos_cosmos_sdk_types.Int\n}\n")),(0,a.kt)("p",null,"This message should call the ",(0,a.kt)("inlineCode",{parentName:"p"},"withdrawPosition")," keeper method that is introduced\nin the ",(0,a.kt)("inlineCode",{parentName:"p"},'"Liquidity Provision"')," section of this document."),(0,a.kt)("h3",{id:"msgcreatepool"},(0,a.kt)("inlineCode",{parentName:"h3"},"MsgCreatePool")),(0,a.kt)("p",null,"This message is responsible for creating a concentrated-liquidity pool.\nIt propagates the execution flow to the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/poolmanager")," module for pool id\nmanagement and for routing swaps."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgCreateConcentratedPool struct {\n Sender                    string\n Denom0                    string\n Denom1                    string\n TickSpacing               uint64\n SpreadFactor                   github_com_cosmos_cosmos_sdk_types.Dec\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Response"))),(0,a.kt)("p",null,"On successful response, the pool id is returned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgCreateConcentratedPoolResponse struct {\n PoolID uint64\n}\n")),(0,a.kt)("h3",{id:"msgcollectspreadrewards"},(0,a.kt)("inlineCode",{parentName:"h3"},"MsgCollectSpreadRewards")),(0,a.kt)("p",null,"This message allows collecting rewards from spreads for multiple position IDs from a\nsingle owner."),(0,a.kt)("p",null,'The spread factor collection is discussed in more detail in the "Spread Rewards" section of this document.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgCollectSpreadRewards struct {\n PositionIds    []uint64\n Sender         string\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Response"))),(0,a.kt)("p",null,"On successful response, the collected tokens are returned.\nThe sender should also see their balance increase by the returned\namounts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgCollectSpreadRewardsResponse struct {\n CollectedSpreadRewards []types.Coin\n}\n")),(0,a.kt)("h3",{id:"msgfungifychargedpositions"},(0,a.kt)("inlineCode",{parentName:"h3"},"MsgFungifyChargedPositions")),(0,a.kt)("p",null,"This message allows fungifying the fully charged unlocked positions belonging to the same owner\nand located in the same tick range.\nMsgFungifyChargedPosition takes in a list of positionIds and combines them into a single position.\nIt validates that all positions belong to the same owner, are in the same ticks and are fully charged.\nFails if not. Otherwise, it creates a completely new position P. P's liquidity equals to the sum of all\nliquidities of positions given by positionIds. The uptime of the join time of the new position equals\nto current block time - max authorized uptime duration (to signify that it is fully charged).\nThe previous positions are deleted from state. Prior to deleting, the rewards are claimed.\nThe old position's unclaimed rewards are transferred to the new position.\nThe new position ID is returned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgFungifyChargedPositions struct {\n PositionIds    []uint64\n Sender         string\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Response"))),(0,a.kt)("p",null,"On successful response, the new position id is returned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type MsgFungifyChargedPositionsResponse struct {\n NewPositionId uint64\n}\n")),(0,a.kt)("h2",{id:"relationship-to-pool-manager-module"},"Relationship to Pool Manager Module"),(0,a.kt)("h3",{id:"pool-creation"},"Pool Creation"),(0,a.kt)("p",null,"As previously mentioned, the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/poolmanager")," is responsible for creating the\npool upon being called from the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/concentrated-liquidity")," module's message server."),(0,a.kt)("p",null,"It does so to store the mapping from pool id to concentrated-liquidity module so\nthat it knows where to route swaps."),(0,a.kt)("p",null,"Upon successful pool creation and pool id assignment, the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/poolmanager")," module\nreturns the execution to ",(0,a.kt)("inlineCode",{parentName:"p"},"x/concentrated-liquidity")," module by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"InitializePool"),"\non the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/concentrated-liquidity")," keeper."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"InitializePool")," method is responsible for doing concentrated-liquidity specific\ninitialization and storing the pool in state."),(0,a.kt)("p",null,"Note, that ",(0,a.kt)("inlineCode",{parentName:"p"},"InitializePool")," is a method defined on the ",(0,a.kt)("inlineCode",{parentName:"p"},"SwapI")," interface that is\nimplemented by all swap modules. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"x/gamm")," also implements it so that\n",(0,a.kt)("inlineCode",{parentName:"p"},"x/pool-manager")," can route pool initialization there as well."),(0,a.kt)("h3",{id:"swaps"},"Swaps"),(0,a.kt)("p",null,"We rely on the swap messages located in ",(0,a.kt)("inlineCode",{parentName:"p"},"x/poolmanager"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MsgSwapExactAmountIn")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MsgSwapExactAmountOut"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"x/poolmanager")," received the swap messages and, as long as the swap's pool id\nis associated with the ",(0,a.kt)("inlineCode",{parentName:"p"},"concentrated-liquidity"),' pool, the swap is routed\ninto the relevant module. The routing is done via the mapping from state that was\ndiscussed in the "Pool Creation" section.'),(0,a.kt)("h2",{id:"liquidity-provision"},"Liquidity Provision"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"As an LP, I want to provide liquidity in ranges so that I can achieve greater\ncapital efficiency")),(0,a.kt)("p",null,"This is a basic function that should allow LPs to provide liquidity in specific ranges\nto a pool."),(0,a.kt)("p",null,'A pool\'s liquidity is consisted of two assets: asset0 and asset1. In all pools,\nasset1 will be the quote asset and must be an approved denom listed in the module\nparameters. At the current tick, the bucket at this tick consists of a mix of both\nasset0 and asset1 and is called the virtual liquidity of the pool (or "L" for short).\nAny positions set below the current price are consisted solely of asset0 while\npositions above the current price only contain asset1.'),(0,a.kt)("h3",{id:"adding-liquidity"},"Adding Liquidity"),(0,a.kt)("p",null,"We can either provide liquidity above or below the current price, which would\nact as a range order, or decide to provide liquidity at the current price."),(0,a.kt)("p",null,"As declared in the API for ",(0,a.kt)("inlineCode",{parentName:"p"},"createPosition"),", users provide the upper and lower\ntick to denote the range they want to provide the liquidity in. The users are\nalso prompted to provide the amount of token0 and token1 they desire to receive.\nThe liquidity that needs to be provided for the given token0 and token1 amounts\nwould be then calculated by the following methods:"),(0,a.kt)("p",null,"Liquidity needed for token0:\n$$L = \\frac{\\Delta x \\sqrt{P_u} \\sqrt{P_l}}{\\sqrt{P_u} - \\sqrt{P_l}}$$"),(0,a.kt)("p",null,"Liquidity needed for token1:\n$$L = \\frac{\\Delta y}{\\sqrt{P_u}-\\sqrt{P_l}}$$"),(0,a.kt)("p",null,"Then, we pick the smallest of the two values for choosing the final ",(0,a.kt)("inlineCode",{parentName:"p"},"L"),". The\nreason we do that is because the new liquidity must be proportional to the old\none. By choosing the smaller value, we distribute the liqudity evenly between\nthe two tokens. In the future steps, we will re-calculate the amount of token0\nand token1 as a result the one that had higher liquidity will end up smaller\nthan originally given by the user."),(0,a.kt)("p",null,"Note that the liquidity used here does not represent an amount of a specific\ntoken, but the liquidity of the pool itself, represented in ",(0,a.kt)("inlineCode",{parentName:"p"},"sdk.Dec"),"."),(0,a.kt)("p",null,"Using the provided liquidity, now we calculate the delta amount of both token0\nand token1, using the following equations, where L is the liquidity calculated above:"),(0,a.kt)("p",null,"$$\\Delta x = \\frac{L(\\sqrt{p(i_u)} - \\sqrt{p(i_c)})}{\\sqrt{p(i_u)}\\sqrt{p(i_c)}}$$\n$$\\Delta y = L(\\sqrt{p(i_c)} - \\sqrt{p(i_l)})$$"),(0,a.kt)("p",null,"Again, by recalculating the delta amount of both tokens, we make sure that the\nnew liquidity is proportional to the old one and the excess amount of the token\nthat originally computed a larger liquidity is given back to the user."),(0,a.kt)("p",null,"The delta X and the delta Y are the actual amounts of tokens joined for the\nrequested position."),(0,a.kt)("p",null,"Given the parameters needed for calculating the tokens needed for creating a\nposition for a given tick, the API in the keeper layer would look like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"ctx sdk.Context, poolId uint64, owner sdk.AccAddress, amount0Desired,\namount1Desired, amount0Min, amount1Min sdk.Int,\nlowerTick, upperTick int64, frozenUntil time.Time\nfunc createPosition(\n    ctx sdk.Context,\n    poolId uint64,\n    owner sdk.AccAddress,\n    amount0Desired,\n    amount1Desired,\n    amount0Min,\n    amount1Min sdk.Int\n    lowerTick,\n    upperTick int64) (amount0, amount1 sdk.Int, sdk.Dec, error) {\n        ...\n}\n")),(0,a.kt)("h3",{id:"removing-liquidity"},"Removing Liquidity"),(0,a.kt)("p",null,"Removing liquidity is achieved via method ",(0,a.kt)("inlineCode",{parentName:"p"},"withdrawPosition")," which is the inverse\nof previously discussed ",(0,a.kt)("inlineCode",{parentName:"p"},"createPosition"),". In fact, the two methods share the same\nunderlying logic, having the only difference being the sign of the liquidity.\nPlus signifying addition while minus signifying subtraction."),(0,a.kt)("p",null,"Withdraw position also takes an additional parameter which represents the liqudity\na user wants to remove. It must be less than or equal to the available liquidity\nin the position to be successful."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (k Keeper) withdrawPosition(\n    ctx sdk.Context,\n    poolId uint64,\n    owner sdk.AccAddress,\n    lowerTick,\n    upperTick int64,\n    frozenUntil time.Time,\n    requestedLiquidityAmountToWithdraw sdk.Dec)\n    (amtDenom0, amtDenom1 sdk.Int, err error) {\n    ...\n}\n")),(0,a.kt)("h2",{id:"swapping"},"Swapping"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"As a trader, I want to be able to swap over a concentrated liquidity pool so\nthat my trades incur lower slippage")),(0,a.kt)("p",null,"Unlike balancer pools where liquidity is spread out over an infinite range,\nconcentrated liquidity pools allow for LPs to provide deeper liquidity for\nspecific price ranges, which in turn allows traders to incur less slippage on\ntheir trades."),(0,a.kt)("p",null,"Despite this improvement, the liquidity at the current price is still finite,\nand large single trades in times of high volume, as well as trades against\nvolatile assets, are eventually bound to incur some slippage."),(0,a.kt)("p",null,"In order to determine the depth of liquidity and subsequent amountIn/amountOut\nvalues for a given pool, we track the swap's state across multiple swap \"steps\".\nYou can think of each of these steps as the current price following the original\nxy=k curve, with the far left bound being the next initialized tick below the\ncurrent price and the far right bound being the next initialized tick above the\ncurrent price. It is also important to note that we always view prices of asset1\nin terms of asset0, and selling asset1 for asset0 would, in turn, increase its\nspot price. The reciprocal is also true, where if we sell asset0 for asset1,\nwe would decrease the pool's spot price."),(0,a.kt)("p",null,'When a user swaps asset0 for asset1 (can also be seen as "selling" asset0), we\nmove left along the curve until asset1 reserves in this tick are depleted.\nIf the tick of the current price has enough liquidity to fulfill the order without\nstepping to the next tick, the order is complete. If we deplete all of asset1 in\nthe current tick, this then marks the end of the first swap "step". Since all\nliquidity in this tick has been depleted, we search for the next closest tick\nto the left of the current tick that has liquidity. Once we reach this tick, we\ndetermine how much more of asset1 is needed to complete the swap. This process\ncontinues until either the entire order is fulfilled or all liquidity is drained\nfrom the pool.'),(0,a.kt)("p",null,"The same logic is true for swapping asset1, which is analogous to buying asset0;\nhowever, instead of moving left along the set of curves, we instead search for\nliquidity to the right."),(0,a.kt)("p",null,"From the user perspective, there are two ways to swap:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Swap given token in for token out."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"E.g. I have 1 ETH that I swap for some computed amount of DAI."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Swap given token out for token in"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"E.g. I want to get out 3000 DAI for some amount of ETH to compute.")))),(0,a.kt)("p",null,"Each case has a corresponding message discussed previously in the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/poolmanager"),"\nsection."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MsgSwapExactIn")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MsgSwapExactOut"))),(0,a.kt)("p",null,"Once a message is received by the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/poolmanager"),", it is propageted into a\ncorresponding keeper\nin ",(0,a.kt)("inlineCode",{parentName:"p"},"x/concentrated-liquidity"),"."),(0,a.kt)("p",null,"The relevant keeper method then calls its non-mutative ",(0,a.kt)("inlineCode",{parentName:"p"},"calc")," version which is\none of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"calcOutAmtGivenIn")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"calcInAmtGivenOut"))),(0,a.kt)("p",null,"State updates only occur upon successful execution of the swap inside the calc method.\nWe ensure that calc does not update state by injecting ",(0,a.kt)("inlineCode",{parentName:"p"},"sdk.CacheContext")," as its\ncontext parameter. The cache context is dropped on failure and committed on success."),(0,a.kt)("h3",{id:"calculating-swap-amounts"},"Calculating Swap Amounts"),(0,a.kt)("p",null,"Let's now focus on the core logic of calculating swap amounts.\nWe mainly focus on ",(0,a.kt)("inlineCode",{parentName:"p"},"calcOutAmtGivenIn")," as the high-level steps of ",(0,a.kt)("inlineCode",{parentName:"p"},"calcInAmtGivenOut"),"\nare similar."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1. Determine Swap Strategy")),(0,a.kt)("p",null,"The first step we need to determine is the swap strategy. The swap strategy determines\nthe direction of the swap, and it is one of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"zeroForOne")," - swap token zero in for token one out.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"oneForZero")," - swap token one in for token zero out."))),(0,a.kt)("p",null,"Note that the first token in the strategy name always corresponds to the token\nbeing swapped in, while the second token corresponds to the token being swapped\nout. This is true for both ",(0,a.kt)("inlineCode",{parentName:"p"},"calcOutAmtGivenIn")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"calcInAmtGivenOut")," calc methods."),(0,a.kt)("p",null,"Recall that, in our model, we fix the tokens axis at the time of pool creation.\nThe token on the x-axis is token zero, while the token on the y-axis is token one."),(0,a.kt)("p",null,"Given that the sqrt price is defined as $$\\sqrt (y / x)$$, as we swap token zero\n(x-axis) in for token one (y-axis), we decrease the sqrt price and move down\nalong the price/tick curve. Conversely, as we swap token one (y-axis) in for token\nzero (x-axis), we increase the sqrt price and move up along the price/tick curve."),(0,a.kt)("p",null,"The reason we call this a price/tick curve is because there is a relationship\nbetween the price and the tick. As a result, when we perform the swap, we are\nlikely to end up crossing a tick boundary. As a tick is crossed, the swap state\ninternals must be updated. We will discuss this in more detail later."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2. Initialize Swap State")),(0,a.kt)("p",null,"The next step is to initialize the swap state. The swap state is a struct that\ncontains all of the swap state to be done within the current active tick\n(before we across a tick boundary)."),(0,a.kt)("p",null,"It contains the following fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// SwapState defines the state of a swap.\n// It is initialized as the swap begins and is updated after every swap step.\n// Once the swap is complete, this state is either returned to the estimate\n// swap querier or committed to state.\ntype SwapState struct {\n // Remaining amount of specified token.\n // if out given in, amount of token being swapped in.\n // if in given out, amount of token being swapped out.\n // Initialized to the amount of the token specified by the user.\n // Updated after every swap step.\n amountSpecifiedRemaining sdk.Dec\n\n // Amount of the other token that is calculated from the specified token.\n // if out given in, amount of token swapped out.\n // if in given out, amount of token swapped in.\n // Initialized to zero.\n // Updated after every swap step.\n amountCalculated sdk.Dec\n\n // Current sqrt price while calculating swap.\n // Initialized to the pool's current sqrt price.\n // Updated after every swap step.\n sqrtPrice sdk.Dec\n // Current tick while calculating swap.\n // Initialized to the pool's current tick.\n // Updated each time a tick is crossed.\n tick sdk.Int\n // Current liqudiity within the active tick.\n // Initialized to the pool's current tick's liquidity.\n // Updated each time a tick is crossed.\n liquidity sdk.Dec\n\n // Global spread reward growth per-current swap.\n // Initialized to zero.\n // Updated after every swap step.\n spreadRewardGrowthGlobal sdk.Dec\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"3. Compute Swap")),(0,a.kt)("p",null,"The next step is to compute the swap. Conceptually, it can be done in two ways\nlisted below.Before doing so, we find the next initialized tick. An initialized\ntick is the tick that is touched by the edges of at least one position. If no\nposition has an edge at a tick, then that tick is uninitialized."),(0,a.kt)("p",null,"a. Swap within the same initialized tick range."),(0,a.kt)("p",null,'See "Appendix A" for details on what "initialized" means.'),(0,a.kt)("p",null,"This case occurs when ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.amountSpecifiedRemaining")," is less than or equal\nto the amount needed to reach the next tick. We omit the math needed to determine\nhow much is enough until a later section."),(0,a.kt)("p",null,"b. Swap across multiple initialized tick ranges."),(0,a.kt)("p",null,'See "Appendix A" for details on what "initialized" means.'),(0,a.kt)("p",null,"This case occurs when ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.amountSpecifiedRemaining")," is greater than the\namount needed to reach the next tick"),(0,a.kt)("p",null,"In terms of the code implementation, we loop, calling a ",(0,a.kt)("inlineCode",{parentName:"p"},"swapStrategy.ComputeSwapStepOutGivenIn"),"\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"swapStrategy.ComputeSwapStepInGivenOut")," method, depending on swap out given\nin or in given out, respectively."),(0,a.kt)("p",null,"The swap strategy is already initialized to be either ",(0,a.kt)("inlineCode",{parentName:"p"},"zeroForOne")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"oneForZero"),"\nfrom step 1. Go dynamically determines the desired implementation via polymorphism."),(0,a.kt)("p",null,"We leave details of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ComputeSwapStepOutGivenIn")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ComputeSwapStepInGivenOut"),'\nmethods to the appendix of the "Swapping" section.'),(0,a.kt)("p",null,"The iteration stops when ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.amountSpecifiedRemaining")," runs out or when\nswapState.sqrtPrice reaches the sqrt price limit specified by the user as a price\nimpact protection."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"4. Update Swap State")),(0,a.kt)("p",null,"Upon computing the swap step, we update the swap state with the results of the\nswap step. Namely,"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Subtract the consumed specified amount from ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.amountSpecifiedRemaining"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Add the calculated amount to ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.amountCalculated"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Update ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.sqrtPrice")," to the new sqrt price. The new sqrt price is not\nnecessarily the sqrt price of the next tick. It is the sqrt price of the next tick\nif the swap step crosses a tick boundary. Otherwise, it is something in between\nthe original and the next tick sqrt price.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Update ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.tick")," to the next initialized tick if it is reached;\notherwise, update it to the new tick calculated from the new sqrt price.\nIf the sqrt price is unchanged, the tick remains unchanged as well.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Update ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.liquidity")," to the new liquidity only if the next initialized\ntick is crossed. The liquidity is updated by incorporating the ",(0,a.kt)("inlineCode",{parentName:"p"},"liquidity_net"),"\namount associated with the next initialized tick being crossed.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Update ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.spreadRewardGrowthGlobal")," to the value of the total spread factor charged within\nthe swap step on the amount of token in per one unit of liquidity within the\ntick range being swapped in."))),(0,a.kt)("p",null,"Then, we either proceed to the next swap step or finalize the swap."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"5. Update Global State")),(0,a.kt)("p",null,"Once the swap is completed, we persiste the swap state to the global state\n(if mutative action is performed) and return the ",(0,a.kt)("inlineCode",{parentName:"p"},"amountCalculated")," to the user."),(0,a.kt)("h2",{id:"migration"},"Migration"),(0,a.kt)("p",null,"Users can migrate their Balancer positions to a Concentrated Liquidity full range\nposition provided the underlying Balancer pool has a governance-selected canonical\nConcentrated Liquidity pool. The migration is routed depending on the state of the\nunderlying Balancer position:"),(0,a.kt)("p",null,"Balancer position is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Superfluid delegated",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Locked"))),(0,a.kt)("li",{parentName:"ul"},"Superfluid undelegating",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Locked"),(0,a.kt)("li",{parentName:"ul"},"Unlocking"))),(0,a.kt)("li",{parentName:"ul"},"Normal lock",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Locked"),(0,a.kt)("li",{parentName:"ul"},"Unlocking"))),(0,a.kt)("li",{parentName:"ul"},"Unlocked")),(0,a.kt)("p",null,"Regardless of the path taken, the ",(0,a.kt)("inlineCode",{parentName:"p"},"UnlockAndMigrateSharesToFullRangeConcentratedPosition"),"\nmessage executes all of the below logic:"),(0,a.kt)("h3",{id:"superfluid-delegated-balancer-to-concentrated"},"Superfluid Delegated Balancer to Concentrated"),(0,a.kt)("p",null,"The following diagram illustrates the migration flow for a Superfluid delegated\nBalancer position to a Superfluid delegated Concentrated Liquidity position."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Migrate Superfluid Delegate Balancer to Concentrated",src:i(61010).Z,width:"1447",height:"1336"})),(0,a.kt)("p",null,"The migration process starts by removing the connection between the GAMM lock and\nthe GAMM intermediary account. The synthetic OSMO that was previously minted by\nthe GAMM intermediary account is immediately undelegated (skipping the two-week\nunbonding period) and sent to the Superfluid module account where it is burned."),(0,a.kt)("p",null,"Next, the Lockup module account holding the original GAMM shares sends them back\nto the user, deleting the GAMM lock in the process. These shares are used to\nclaim the underlying two assets from the GAMM pool, which are then immediately\nput into a full range Concentrated Liquidity position in the canonical\nConcentrated Liquidity pool."),(0,a.kt)("p",null,"The underlying liquidity this creates is tokenized (similar to GAMM shares) and\nis put into a new lock, which is then routed to the Lockup module account. A new\nintermediary account is created based on this new CL share denom. The new\nintermediary account mints synthetic OSMO and delegates it to the validator the\nuser originally delegated to. Finally, a new synthetic lock in a bonded status\nis created based on the new CL lock ID, the new CL intermediary account, and the\nnew CL synthetic denom."),(0,a.kt)("h3",{id:"superfluid-undelegating-balancer-to-concentrated"},"Superfluid Undelegating Balancer to Concentrated"),(0,a.kt)("p",null,"The following diagram illustrates the migration flow for a superfluid undelegating\nbalancer position to a superfluid undelegating concentrated liquidity position.\nThe reason we must account for this situation is to respect the two week unbonding\nperiod that is required for superfluid undelegating, and be capable of slashing\na position that was migrated."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Migrate Superfluid Undelegating Balancer to Concentrated",src:i(32705).Z,width:"1395",height:"1285"})),(0,a.kt)("p",null,"The process is identical to the Superfluid delegated migration, with three\nexceptions. First, the connection between the GAMM intermediary account and the\nGAMM lock is already removed when a user started undelegation, so it does not\nneed to be done again. Second, no synthetic OSMO needs to be burned or created.\nLastly, instead of creating a new CL synthetic lock in a bonded status, we create\na new CL synthetic lock in an unlocking status. This lock will be unlocked once\nthe two-week unbonding period is over."),(0,a.kt)("h3",{id:"locked-and-unlocked-balancer-to-concentrated"},"Locked and Unlocked Balancer to Concentrated"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"locked<>locked")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"unlocked<>unlocked")," migration utilizes a subset of actions\nthat were taken in the superfluid migration. The Lockup module account that was\nholding the original GAMM shares sends them back to the user, deleting the GAMM\nlock in the process. These shares are used to claim the underlying two assets\nfrom the GAMM pool, which are then immediately put into a full range Concentrated\nLiquidity position in the canonical Concentrated Liquidity pool."),(0,a.kt)("p",null,"If it was previously locked, we keep the concentrated locked for the same period\nof time. If it was previously unlocking, we begin unlocking the concentrated lock\nfrom where the GAMM lock left off."),(0,a.kt)("h3",{id:"balancer-to-concentrated-with-no-lock"},"Balancer to Concentrated with No Lock"),(0,a.kt)("p",null,"When GAMM shares are not locked, they are simply claimed for the underlying two\nassets, which are then immediately put into a full range concentrated liquidity\nposition in the canonical concentrated liquidity pool. No locks are involved in\nthis migration."),(0,a.kt)("h2",{id:"position-fungification"},"Position Fungification"),(0,a.kt)("p",null,"There is a possibility to fungify fully-charged positions within the same tick range.\nAssume that there are two positions in the same tick range and both are fully charged."),(0,a.kt)("p",null,"As a user, I might want to combine them into a single position so that I don't have to manage\npositions inside the same tick range separately."),(0,a.kt)("p",null,"Therefore, I execute ",(0,a.kt)("inlineCode",{parentName:"p"},"MsgFungifyChargedPositions")," that takes a list of position ids to fungify\nand merges them into one."),(0,a.kt)("p",null,"Besides being fully charged, all of the positions must be in the same tick range and have the same\nowner (sender). All must belong to the same pool and be unlocked. As a result, none of the positions\ncan be superfluid staked if they are full-range."),(0,a.kt)("p",null,"Once the message finishes, the user will have a completely new position with spread factors and incentive rewards\nmoved into the new position. The old positions will be deleted."),(0,a.kt)("h2",{id:"swapping-appendix-a-example"},"Swapping. Appendix A: Example"),(0,a.kt)("p",null,"Note, that the numbers used in this example are not realistic. They are used to\nillustrate the concepts on the high level."),(0,a.kt)("p",null,"Imagine a tick range from min tick -1000 to max tick 1000 in a pool with a 1%\nspread factor."),(0,a.kt)("p",null,"Assume that user A created a full range position from ticks -1000 to 1000 for\n",(0,a.kt)("inlineCode",{parentName:"p"},"10_000")," liquidity units."),(0,a.kt)("p",null,"Assume that user B created a narrow range position from ticks 0 to 100 for ",(0,a.kt)("inlineCode",{parentName:"p"},"1_000"),"\nliquidity units."),(0,a.kt)("p",null,"Assume the current active tick is -34 and user perform a swap in the positive\ndirection of the tick range by swapping 5_000 tokens one in for some tokens\nzero out."),(0,a.kt)("p",null,"Our tick range and liquidity graph now looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"         cur_sqrt_price      //////////               <--- position by user B\n\n/////////////////////////////////////////////////////////  <---position by user A\n-1000           -34          0       100              1000\n")),(0,a.kt)("p",null,"The swap state is initialized as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"amountSpecifiedRemaining")," is set to 5_000 tokens one in specified by the user."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"amountCalculated")," is set to zero."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sqrtPrice")," is set to the current sqrt price of the pool\n(computed from the tick -34)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tick")," is set to the current tick of the pool (-34)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"liquidity")," is set to the current liquidity tracked by the pool at tick -34 (10_000)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"spreadRewardGrowthGlobal")," is set to (0)")),(0,a.kt)("p",null,"We proceed by getting the next initialized tick in the direction of the swap (0)."),(0,a.kt)("p",null,"Each initialized tick has 2 fields:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"liquidity_gross")," - this is the total liquidity referencing that tick\nat tick -1000: 10_000\nat tick 0: 1_000\nat tick 100: 1_000\nat tick 1000: 10_000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"liquidity_net")," - liquidity that needs to be added to the active liquidity as\nwe cross the tick moving in the positive direction so that the active liquidity\nis always the sum of all ",(0,a.kt)("inlineCode",{parentName:"p"},"liquidity_net")," amounts of initialized ticks below the\ncurrent one.\nat tick -1000: 10_000\nat tick 0: 1_000\nat tick 100: -1_000\nat tick 1000: -10_000"))),(0,a.kt)("p",null,"Next, we compute swap step from tick -34 to tick 0. Assume that 5_000 tokens one\nin is more than enough to cross tick 0 and it returns 10_000 of token zero out\nwhile consuming half of token one in (2500)."),(0,a.kt)("p",null,"Now, we update the swap state as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"amountSpecifiedRemaining")," is set to 5000 - 2_500 = 2_500 tokens one in remaining.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"amountCalculated")," is set to 10_000 tokens zero out calculated.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"sqrtPrice")," is set to the sqrt price of the crossed initialized tick 0 (0).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tick")," is set to the tick of the crossed initialized tick 0 (0).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"liquidity")," is set to the old liquidity value (10_000) + the ",(0,a.kt)("inlineCode",{parentName:"p"},"liquidity_net"),"\nof the crossed tick 0 (1_000) = 11_000.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"spreadRewardGrowthGlobal")," is set to 2_500 ","*"," 0.01 / 10_000 = 0.0025 because we assumed\n1% spread factor."))),(0,a.kt)("p",null,"Now, we proceed by getting the next initialized tick in the direction of\nthe swap (100)."),(0,a.kt)("p",null,"Next, we compute swap step from tick 0 to tick 100. Assume that 2_500 remaining\ntokens one in is not enough to reach the next initialized tick 100 and it returns\n12_500 of token zero out while only reaching tick 70. The reason why we now get a\ngreater amount of token zero out for the same amount of token one in is because the\nliquidity in this tick range is greater than the liquidity in the previous tick range."),(0,a.kt)("p",null,"Now, we update the swap state as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"amountSpecifiedRemaining")," is set to 2_500 - 2_500 = 0 tokens one in remaining.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"amountCalculated")," is set to 10_000 + 12_500 = 22_500 tokens zero out calculated.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"sqrtPrice")," is set to the reached sqrt price.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tick")," is set to an uninitialized tick associated with the reached sqrt price (70).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"liquidity")," is set kept the same as we did not cross any initialized tick.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"spreadRewardGrowthGlobal")," is updated to 0.0025 + (2_500 ","*"," 0.01 / 10_000) = 0.005\nbecause we assumed 1% spread factor."))),(0,a.kt)("p",null,'As a result, we complete the swap having swapped 5_000 tokens one in for 22_500\ntokens zero out. The tick is now at 70 and the current liquidity at the active\ntick tracked by the pool is 11_000. The global spread reward growth per unit of liquidity\nhas increased by 50 units of token one. See more details about the spread reward growth\nin the "Spread Rewards" section.'),(0,a.kt)("p",null,"TODO: Swapping, Appendix B: Compute Swap Step Internals and Math"),(0,a.kt)("h2",{id:"range-orders"},"Range Orders"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"As a trader, I want to be able to execute ranger orders so that I have better\ncontrol of the price at which I trade")),(0,a.kt)("p",null,"TODO"),(0,a.kt)("h2",{id:"spread-rewards"},"Spread Rewards"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"As a an LP, I want to earn spread rewards on my capital so that I am incentivized to\nparticipate in active market making.")),(0,a.kt)("p",null,"In Balancer-style pools, spread rewards go directly back into the pool to benefit all LPs pro-rata.\nFor concentrated liquidity pools, this approach is no longer feasible due to the\nnon-fungible property of positions. As a result, we use a different accumulator-based\nmechanism for tracking and storing spread rewards."),(0,a.kt)("p",null,"Reference the following papers for more information on the inspiration behind our accumulator package:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://uploads-ssl.webflow.com/5ad71ffeb79acc67c8bcdaba/5ad8d1193a40977462982470_scalable-reward-distribution-paper.pdf"},"Scalable Reward Distribution")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://drops.dagstuhl.de/opus/volltexte/2020/11974/pdf/OASIcs-Tokenomics-2019-10.pdf"},"F1 Fee Distribution"))),(0,a.kt)("p",null,"We define the following accumulator and spread-reward-related fields to be stored on various\nlayers of state:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Per-pool"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Note that this is proto-generated.\ntype Pool struct {\n    ...\n    SpreadFactor sdk.Dec\n}\n")),(0,a.kt)("p",null,"Each pool is initialized with a static spread factor value ",(0,a.kt)("inlineCode",{parentName:"p"},"SpreadFactor")," to be paid by swappers.\nAdditionally, each pool's spread reward accumulator tracks and stores the total rewards accrued from spreads\nthroughout its lifespan, named ",(0,a.kt)("inlineCode",{parentName:"p"},"SpreadRewardGrowthGlobal"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Per-tick"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Note that this is proto-generated.\ntype TickInfo struct {\n    ...\n   SpreadRewardGrowthOppositeDirectionOfLastTraversal sdk.DecCoins\n}\n")),(0,a.kt)("p",null,"TickInfo keeps a record of spread rewards accumulated opposite the direction the tick was last traversed.\nIn other words, when traversing the tick from right to left, ",(0,a.kt)("inlineCode",{parentName:"p"},"SpreadRewardGrowthOppositeDirectionOfLastTraversal"),"\nrepresents the spread rewards accumulated above that tick. When traversing the tick from left to right,\n",(0,a.kt)("inlineCode",{parentName:"p"},"SpreadRewardGrowthOppositeDirectionOfLastTraversal")," represents the spread rewards accumulated below that tick."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Tick Updates",src:i(62933).Z,width:"2850",height:"1974"})),(0,a.kt)("p",null,"This information is required for calculating the amount of spread rewards that accrue between\na range of two ticks."),(0,a.kt)("p",null,"Note that keeping track of the spread reward growth is only necessary for the ticks that\nhave been initialized. In other words, at least one position must be referencing\nthat tick to require tracking the spread reward growth occurring in that tick."),(0,a.kt)("p",null,"By convention, when a new tick is activated, it is set to the pool's ",(0,a.kt)("inlineCode",{parentName:"p"},"SpreadRewardGrowthGlobal"),"\nif the tick being initialized is above the current tick."),(0,a.kt)("p",null,"See the following code snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"if tickIndex <= currentTick {\n  accum, err := k.GetSpreadRewardAccumulator(ctx, poolId)\n  if err != nil {\n    return err\n  }\n\n  tickInfo.SpreadRewardGrowthBelow = accum.GetValue()\n}\n")),(0,a.kt)("p",null,"Essentially, setting the tick's ",(0,a.kt)("inlineCode",{parentName:"p"},"tickInfo.SpreadRewardGrowthOppositeDirectionOfLastTraversal"),"\nto the pools accum value represents the amount of spread rewards collected by the pool up until\nthe tick was activated."),(0,a.kt)("p",null,"Once a tick is activated again (crossed in either direction),\n",(0,a.kt)("inlineCode",{parentName:"p"},"tickInfo.SpreadRewardGrowthOppositeDirectionOfLastTraversal")," is updated to add the difference\nbetween the pool's current accumulator value and the old value of\n",(0,a.kt)("inlineCode",{parentName:"p"},"tickInfo.SpreadRewardGrowthOppositeDirectionOfLastTraversal"),"."),(0,a.kt)("p",null,"Tracking how many spread rewards are collected below, in the case of a lower tick, and above,\nin the case of an upper tick, allows us to calculate the\namount of spread rewards inside a position (spread reward growth inside between two ticks) on demand.\nThis is done by updating the activated tick with the amount of spread rewards collected for\nevery tick lower than the tick that is being crossed."),(0,a.kt)("p",null,"This has two benefits:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We avoid updating ",(0,a.kt)("em",{parentName:"li"},"all")," ticks"),(0,a.kt)("li",{parentName:"ul"},"We can calculate a range by subtracting the upper and lower ticks for the range\nusing the logic below.")),(0,a.kt)("p",null,"We calculate the spread reward growth above the upper tick in the following way:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If calculating spread reward growth for an upper tick, we consider the following two cases:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"currentTick >= upperTick: If the current tick is greater than or equal to the\nupper tick, the spread reward growth would be the pool's spread reward growth minus the upper tick's"),(0,a.kt)("li",{parentName:"ul"},"currentTick < upperTick: If the current tick is smaller than the upper tick,\nthe spread reward growth would be the upper tick's spread reward growth outside.")))),(0,a.kt)("p",null,"This process is vice versa for calculating spread reward growth below the lower tick."),(0,a.kt)("p",null,"Now, by having the spread reward growth below the lower and above the upper tick of a range,\nwe can calculate the spread reward growth inside the range by subtracting the two from the\nglobal per-unit-of-liquidity spread reward growth."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Spread Reward Growth Outside Calculations",src:i(75304).Z,width:"2693",height:"2662"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"spreadRewardGrowthInsideRange := SpreadRewardGrowthGlobalOutside - spreadRewardGrowthBelowLowerTick - spreadRewardGrowthAboveUpperTick\n")),(0,a.kt)("p",null,"Note that although ",(0,a.kt)("inlineCode",{parentName:"p"},"tickInfo.SpreadRewardGrowthOutside")," may be initialized at different times\nfor each tick, the comparison of these values between ticks is not meaningful, and\nthere is no guarantee that the values across ticks will follow any particular pattern.\nHowever, this does not affect the per-position calculations since all the position\nneeds to know is the spread reward growth inside the position's range since the position was\nlast interacted with."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Per-position-accumulator"))),(0,a.kt)("p",null,"In a concentrated liquidity pool, unlike traditional pools, spread rewards do not get automatically\nre-added to pool. Instead, they are tracked by the ",(0,a.kt)("inlineCode",{parentName:"p"},"unclaimedRewards")," fields of each\nposition's accumulator."),(0,a.kt)("p",null,"The amount of uncollected spread rewards needs to be calculated every time a user modifies\ntheir position. This occurs when a position is created, and liquidity is removed\n(liquidity added is analogous to creating a new position)."),(0,a.kt)("p",null,"We must recalculate the values for any modification, because with a change in liquidity\nfor the position, the amount of spread rewards allocated to the position must also change accordingly."),(0,a.kt)("h2",{id:"collecting-spread-rewards"},"Collecting Spread Rewards"),(0,a.kt)("p",null,"Once calculated, collecting spread rewards is a straightforward process of transferring the\ncalculated amount from the pool address to the position owner."),(0,a.kt)("p",null,"To collect spread rewards, users call ",(0,a.kt)("inlineCode",{parentName:"p"},"MsgCollectSpreadRewards")," with the ID corresponding to\ntheir position. The function ",(0,a.kt)("inlineCode",{parentName:"p"},"collectSpreadRewards")," in the keeper is responsible for\nexecuting the spread reward collection and returning the amount collected, given the owner's\naddress and the position ID:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (k Keeper) collectSpreadRewards(\n    ctx sdk.Context,\n    owner sdk.AccAddress,\n    positionId uint64) (sdk.Coins, error) {\n}\n")),(0,a.kt)("p",null,"This returns the amount of spread rewards collected by the user."),(0,a.kt)("h2",{id:"swaps-1"},"Swaps"),(0,a.kt)("p",null,"Swapping within a single tick works as the regular ",(0,a.kt)("inlineCode",{parentName:"p"},"xy = k")," curve. For swaps\nacross ticks to work, we simply apply the same spread reward calculation logic for every swap step."),(0,a.kt)("p",null,"Consider data structures defined above. Let ",(0,a.kt)("inlineCode",{parentName:"p"},"tokenInAmt")," be the amount of token being\nswapped in."),(0,a.kt)("p",null,"Then, to calculate the spread reward within a single tick, we perform the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Calculate an updated ",(0,a.kt)("inlineCode",{parentName:"li"},"tokenInAmtAfterSpreadReward")," by charging the ",(0,a.kt)("inlineCode",{parentName:"li"},"pool.SpreadFactor")," on ",(0,a.kt)("inlineCode",{parentName:"li"},"tokenInAmt"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Update global spread reward accumulator tracking spread rewards for denom of tokenInAmt.\n// TODO: revisit to make sure if truncations need to happen.\npool.SpreadRewardGrowthGlobalOutside.TokenX = pool.SpreadRewardGrowthGlobalOutside.TokenX.Add(tokenInAmt.Mul(pool.SpreadFactor))\n\n// Update tokenInAmt to account for spread factor.\nspread_factor = tokenInAmt.Mul(pool.SpreadFactor).Ceil()\ntokenInAmtAfterSpreadFactor = tokenInAmt.Sub(spread_factor)\n\nk.bankKeeper.SendCoins(ctx, swapper, pool.GetAddress(), ...) // send tokenInAmtAfterSpreadFactor\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Proceed to calculating the next square root price by utilizing the updated `tokenInAmtAfterSpreadFactor.")),(0,a.kt)("p",null,"Depending on which of the tokens in ",(0,a.kt)("inlineCode",{parentName:"p"},"tokenIn"),","),(0,a.kt)("p",null,"If token1 is being swapped in:\n$$\\Delta \\sqrt P = \\Delta y / L$$"),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"tokenInAmtAfterSpreadFactor")," is delta y."),(0,a.kt)("p",null,"If token0 is being swapped in:\n$$\\Delta \\sqrt P = L / \\Delta x$$"),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"tokenInAmtAfterSpreadFactor")," is delta x."),(0,a.kt)("p",null,"Once we have the updated square root price, we can calculate the amount of\n",(0,a.kt)("inlineCode",{parentName:"p"},"tokenOut")," to be returned. The returned ",(0,a.kt)("inlineCode",{parentName:"p"},"tokenOut")," is computed with spread rewards\naccounted for given that we used ",(0,a.kt)("inlineCode",{parentName:"p"},"tokenInAmtAfterSpreadFactor"),"."),(0,a.kt)("h2",{id:"swap-step-spread-factors"},"Swap Step Spread Factors"),(0,a.kt)("p",null,"We have a notion of ",(0,a.kt)("inlineCode",{parentName:"p"},"swapState.amountSpecifiedRemaining")," which is the amount of\ntoken in remaining over all swap steps."),(0,a.kt)("p",null,"After performing the current swap step, the following cases are possible:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"All amount remaining is consumed")),(0,a.kt)("p",null,"In that case, the spread factor is equal to the difference between the original amount remaining\nand the one actually consumed. The difference between them is the spread factor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"spreadRewardChargeTotal = amountSpecifiedRemaining.Sub(amountIn)\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Did not consume amount remaining in-full.")),(0,a.kt)("p",null,"The spread factor is charged on the amount actually consumed during a swap step."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"spreadRewardChargeTotal = amountIn.Mul(spreadFactor)\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Price impact protection makes it exit before consuming all amount remaining.")),(0,a.kt)("p",null,"The spread factor is charged on the amount in actually consumed before price impact\nprotection got triggered."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"spreadRewardChargeTotal = amountIn.Mul(spreadFactor)\n")),(0,a.kt)("h2",{id:"incentiveliquidity-mining-mechanism"},"Incentive/Liquidity Mining Mechanism"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Due to the nonfungibility of positions and ticks, incentives for concentrated liquidity requires a\nslightly different mechanism for distributing incentives compared to Balancer and Stableswap pools.\nIn general, the design space of incentive mechanisms for concentrated liquidity DEXs is extremely\nunderexplored, so our implementation takes this as an opportunity to break some new ground in the\nbroader design space of order-book-style AMMs."),(0,a.kt)("p",null,"Below, we outline the approach for CL incentives that Osmosis will be implementing for its initial\nimplementation of concentrated liquidity, as well as our baseline reasoning for why we are pursuing\nthis design."),(0,a.kt)("h2",{id:"target-properties"},"Target Properties"),(0,a.kt)("p",null,"As a starting point, it's important to understand the properties of a healthy liquidity pool.\nThese are all, of course, properties that become self-sustaining once the positive feedback cycle\nbetween liquidity and volume kicks off, but for the sake of understanding what exactly it is that\nwe are trying to bootstrap with incentives it helps to be explicit with our goals."),(0,a.kt)("h3",{id:"liquidity-depth"},"Liquidity Depth"),(0,a.kt)("p",null,"We want to ensure spread rewards and incentives are being used to maximize liquidity depth at the active tick\n(i.e. the tick the current spot price is in), as this gives the best execution price for trades on\nthe pool."),(0,a.kt)("h3",{id:"liquidity-breadth"},"Liquidity Breadth"),(0,a.kt)("p",null,"It is critical that as we roll out concentrated liquidity, there is an incentive for there to be\nwidth in the books for our major pools. This is to avoid the scenario where the liquidity in the\nactive tick gets filled and liquidity falls off a cliff (e.g. when there is a large price move and\nactive tick LPs get bulk arbed against). It is important for our liquidity base to be broad when it\nis low until our CL markets mature and active LPs begin participating."),(0,a.kt)("h3",{id:"liquidity-uptime"},"Liquidity Uptime"),(0,a.kt)("p",null,"We want to ensure that the active tick is not only liquid, but that it is ",(0,a.kt)("em",{parentName:"p"},"consistently")," liquid,\nmeaning that liquidity providers are incentivized to keep their liquidity on the books while\nthey trade."),(0,a.kt)("p",null,"Specifically, we want to ensure that idle liquidity waiting for volume does not sit off the\nbooks with the goal of jumping in when a trade happens, as this makes Osmosis's liquidity\nlook thinner than it is and risks driving volume to other exchanges."),(0,a.kt)("p",null,"While just-in-time (JIT) liquidity technically benefits the trader on a first-degree basis\n(better price execution for that specific trade), it imposes a cost on the whole system by\npushing LPs to an equilibrium that ultimately hurts the DEX (namely that liquidity stays of\nthe books until a trade happens). This instance of ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Braess%27s_paradox"},"Braess's paradox"),"\ncan be remedied with mechanisms designed around rewarding liquidity uptime."),(0,a.kt)("h2",{id:"current-standard-pro-rata-in-active-tick"},"Current Standard: Pro-rata in Active Tick"),(0,a.kt)("p",null,"The current status quo for concentrated liquidity incentives is to distribute them pro-rata\nto all LPs providing liquidity in the active tick. With\nsome ",(0,a.kt)("a",{parentName:"p",href:"https://www.paradigm.xyz/2021/05/liquidity-mining-on-uniswap-v3"},"clever accumulator tricks"),",\nthis can be designed to ensure that each LP only receives incentives for liquidity they contribute\nto the active tick. This approach is incredible for liquidity depth, which is arguably the most\nimportant property we need incentives to be able to accommodate. It is also a user flow that\non-chain market makers are already somewhat familiar with and has enough live examples where\nwe roughly know that it functions as intended."),(0,a.kt)("h2",{id:"our-implementation"},"Our Implementation"),(0,a.kt)("p",null,'At launch, Osmosis\'s CL incentives will primarily be in the format described above while we\niron out a mechanism that achieves the remaining two properties predictably and effectively.\nAs a piece of foreshadowing, the primary problem space we will be tackling is the following:\nstatus quo incentives advantage LPs who keep their liquidity off the books until a trade\nhappens, ultimately pushing liquidity off of the DEX and creating ambiguity around the "real"\nliquidity depth. This forces traders to make uninformed decisions about where to trade their\nassets (or worse, accept worse execution on an inferior venue).'),(0,a.kt)("p",null,"In other words, instead of having incentives go towards bootstrapping healthy liquidity pools,\nthey risk going towards adversely pushing volume to other exchanges at the cost of the DEX,\nactive LPs, and ultimately traders."),(0,a.kt)("h3",{id:"note-on-supported-and-authorized-uptimes"},"Note on supported and authorized uptimes"),(0,a.kt)("p",null,"If you dig through our incentives logic, you might find code dealing with notions of ",(0,a.kt)("strong",{parentName:"p"},"Supported Uptimes"),"\nand ",(0,a.kt)("strong",{parentName:"p"},"Authorized Uptimes"),". These are for an uptime incentivization mechanism we are keeping off\nat launch while we refine a more sophisticated version. We leave the state-related parts\nin core logic to ensure that if we do decide to turn the feature on (even if just to\nexperiment), it could be done by a simple governance proposal (to add more supported\nuptimes to the list of authorized uptimes) and not require a state migration for pools.\nAt launch, only the 1ns uptime will be authorized, which is roughly equivalent to status\nquo CL incentives with the small difference that positions that are created and closed in\nthe same block are not eligible for any incentives."),(0,a.kt)("p",null,"For the sake of clarity, this mechanism functions very similarly to status quo incentives,\nbut it has a separate accumulator for each supported uptime and ensures that only liquidity\nthat has been in the pool for the required amount of time qualifies for claiming incentives."),(0,a.kt)("h3",{id:"incentive-creation-and-querying"},"Incentive Creation and Querying"),(0,a.kt)("p",null,"While it is technically possible for Osmosis to enable the creation of incentive records directly in the CL module, incentive creation is currently funneled through existing gauge infrastructure in the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/incentives")," module. This simplifies UX drastically for frontends, external incentive creators, and governance, while making CL incentives fully backwards-compatible with incentive creation and querying flows that everyone is already used to. As of the initial version of Osmosis's CL, all incentive creation and querying logic will be handled by respective gauge functions (e.g. the ",(0,a.kt)("inlineCode",{parentName:"p"},"IncentivizedPools")," query in the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/incentives")," module will include CL pools that have internal incentives on them)."),(0,a.kt)("p",null,"To create a gauge dedicated to the concentrated liquidity pool, run a ",(0,a.kt)("inlineCode",{parentName:"p"},"MsgCreateGauge")," message in the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/incentives")," module with the following parameter constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PoolId"),": The ID of the CL pool to create a gauge for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DistrTo.LockQueryType")," must be set to ",(0,a.kt)("inlineCode",{parentName:"li"},"locktypes.LockQueryType.NoLock")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DistrTo.Denom")," must be an empty string.")),(0,a.kt)("p",null,"The rest of the parameters can be set according to the desired configuration of the gauge. Please read the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/incentives")," module documentation for more information on how to configure gauges."),(0,a.kt)("p",null,"Note, that the created gauge will start emitting at the first epoch after the given ",(0,a.kt)("inlineCode",{parentName:"p"},"StartTime"),". During the epoch, a ",(0,a.kt)("inlineCode",{parentName:"p"},"x/concentrated-liquidity"),"\nmodule ",(0,a.kt)("inlineCode",{parentName:"p"},"IncentiveRecord")," will be created for every denom in the gauge. This incentive record will be configured to emit all given incentives\nover the period of an epoch. If the gauge is non-perpetual (emits over several epochs), the distribution will be split evenly between the epochs.\nand a new ",(0,a.kt)("inlineCode",{parentName:"p"},"IncentiveRecord")," will be created for each denom every epoch with the emission rate and token set to finish emitting at the end of the epoch."),(0,a.kt)("h3",{id:"reward-splitting-between-classic-and-cl-pools"},"Reward Splitting Between Classic and CL pools"),(0,a.kt)("p",null,"While we want to nudge Classic pool LPs to transition to CL pools, we also want to ensure that we do not have a hard cutoff for incentives where past a certain point it is no longer worth it to provide liquidity to Classic pools. This is because we want to ensure that we have a healthy transition period where liquidity is not split between Classic and CL pools, but rather that liquidity is added to CL pools while Classic pools are slowly drained of liquidity."),(0,a.kt)("p",null,"To achieve this in a way that is difficult to game and efficient for the chain to process, we will be using a ",(0,a.kt)("strong",{parentName:"p"},"reward-splitting")," mechanism that treats ",(0,a.kt)("em",{parentName:"p"},"bonded")," liquidity in a Classic pool that is paired by governance to a CL pool (e.g. for the purpose of migration) as a single full-range position on the CL pool for the purpose of calculating incentives. Note that this ",(0,a.kt)("em",{parentName:"p"},"does not affect spread reward distribution")," and only applies to the flow of incentives through a CL pool."),(0,a.kt)("p",null,"One implication of this mechanism is that it moves the incentivization process to a higher level of abstraction (incentivizing ",(0,a.kt)("em",{parentName:"p"},"pairs")," instead of ",(0,a.kt)("em",{parentName:"p"},"pools"),"). For internal incentives (which are governance managed), this is in line with the goal of continuing to push governance to require less frequent actions, which this change ultimately does."),(0,a.kt)("p",null,"To keep a small but meaningful incentive for LPs to still migrate their positions, we have added a ",(0,a.kt)("strong",{parentName:"p"},"discount rate")," to incentives that are redirected to Classic pools. This is initialized to 5% by default but is a governance-upgradable parameter that can be increased in the future. A discount rate of 100% is functionally equivalent to all the incentives staying in the CL pool."),(0,a.kt)("h2",{id:"twap-integration"},"TWAP Integration"),(0,a.kt)("p",null,"In the context of twap, concentrated liquidity pools function differently from\nCFMM pools."),(0,a.kt)("p",null,"There are 2 major differences that stem from how the liquidity is added and\nremoved in concentrated-liquidity."),(0,a.kt)("p",null,"The first one is given by the fact that a user does not provide liquidity at\npool creation time. Instead, they have to issue a separate message post-pool\ncreation. As a result, there can be a time where there is no valid spot price\ninitialized for a concentrated liquidity pool. When a concentrated liquidity pool\nis created, the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/twap"),' module still initializes the twap records. However, these\nrecords are invalidated by setting the "last error time" field to the block time\nat pool creation. Only adding liquidity to the pool will initialize the spot price\nand twap records correctly. One technical detail to note is that adding liquidity\nin the same block as pool creation will still set the "last error time" field to\nthe block time despite spot price already being initialized. Although we fix an\nerror within that block, it still occurs. As a result, this is deemed acceptable.\nHowever, this is a technical trade-off for implementation simplicity and not an\nintentional design decision.'),(0,a.kt)("p",null,"The second difference from balancer pools is focused around the fact that\nliquidity can be completely removed from a concentrated liquidity pool,\nmaking its spot price be invalid."),(0,a.kt)("p",null,"To recap the basic LP functionality in concentrated liquidity, a user adds\nliqudity by creating a position. To remove liquidity, they withdraw their\nposition. Contrary to CFMM pools, adding or removing liquidity does not affect\nthe price in 99% of the cases in concentrated liquidity. The only two exceptions\nto this rule are:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Creating the first position in the pool.")),(0,a.kt)("p",null,"In this case, we transition from invalid state where there is no liqudity, and\nthe spot price is uninitialized to the state where there is some liqudity, and\nas a result a valid spot price."),(0,a.kt)("p",null,"Note, that if there is a pool where liqudiity is completely drained and re-added,\nthe TWAP's last error time will be pointing at the time when the liquidity was drained.\nThis is different from how twap functions in CFMM pool where liquidity cannot\nbe removed in-full."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Removing the last position in the pool.")),(0,a.kt)("p",null,"In this case, we transition from a valid state with liquidity and spot price to\nan invalid state where there is no liquidity and, as a result, no valid spot\nprice anymore. The last spot price error will be set to the block time of when\nthe last position was removed."),(0,a.kt)("p",null,"To reiterate, the above two exceptions are the only cases where twap is updated\ndue to adding or removing liquidity."),(0,a.kt)("p",null,"The major source of updates with respect to twap is the swap logic. It functions\nsimilarly to CFMM pools where upon the completion of a swap, a listener ",(0,a.kt)("inlineCode",{parentName:"p"},"AfterConcentratedPoolSwap"),"\npropagates the execution to the twap module for the purposes of tracking state updates\nnecessary to retrieve the spot price and update the twap accumulators\n(more details in x/twap module)."),(0,a.kt)("p",null,'Lastly, see the "Listeners" section for more details on how twap is enabled by\nthe use of these hooks.'),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AuthorizedQuoteDenoms")," []string")),(0,a.kt)("p",null,"This was a list of quote denoms that can be used as token1 when creating a pool.\nQuote assets were limited to a small set for the purposes of having convenient\nprice increments stemming from tick to price conversion. "),(0,a.kt)("p",null,"This is no longer an active parameter as of v30 although it remains visible on chain."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsPermisionlessPoolCreationEnabled")," bool")),(0,a.kt)("p",null,"The flag indicating whether permissionless pool creation is enabled or not. For\nlaunch, we have decided to disable permissionless pool creation. It will still\nbe enabled via governance. This is because we want to limit the number of pools\nfor risk management and want to avoid fragmenting liquidity for major denom\npairs with configurations of tick spacing that are not ideal."),(0,a.kt)("h2",{id:"listeners"},"Listeners"),(0,a.kt)("h3",{id:"afterconcentratedpoolcreated"},(0,a.kt)("inlineCode",{parentName:"h3"},"AfterConcentratedPoolCreated")),(0,a.kt)("p",null,"This listener executes after the pool is created."),(0,a.kt)("p",null,"At the time of this writing, it is only utilized by the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/twap")," module.\nThe twap module is expected to create twap records where the last error time\nis set to the block time of when the pool was created. This is because there\nis no liquidity in the pool at creation time."),(0,a.kt)("h3",{id:"afterinitialpoolpositioncreated"},(0,a.kt)("inlineCode",{parentName:"h3"},"AfterInitialPoolPositionCreated")),(0,a.kt)("p",null,"This listener executes after the first position is created in a concentrated\nliquidity pool."),(0,a.kt)("p",null,"At the time of this writing, it is only utilized by the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/twap")," module."),(0,a.kt)("h3",{id:"afterlastpoolpositionremoved"},(0,a.kt)("inlineCode",{parentName:"h3"},"AfterLastPoolPositionRemoved")),(0,a.kt)("p",null,"This listener executes after the last position is removed in a concentrated\nliquidity pool."),(0,a.kt)("p",null,"At the time of this writing, it is only utilized by the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/twap")," module."),(0,a.kt)("h3",{id:"afterconcentratedpoolswap"},(0,a.kt)("inlineCode",{parentName:"h3"},"AfterConcentratedPoolSwap")),(0,a.kt)("p",null,"This listener executes after a swap in a concentrated liquidity pool."),(0,a.kt)("p",null,"At the time of this writing, it is only utilized by the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/twap")," module."),(0,a.kt)("h3",{id:"state-entries-and-kv-store-management"},"State entries and KV store management"),(0,a.kt)("p",null,"The following are the state entries (key and value pairs) stored for the concentrated liquidity module. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"structs",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"TickPrefix + pool ID + tickIndex \u279d Tick Info struct"),(0,a.kt)("li",{parentName:"ul"},"PoolPrefix + pool id \u279d pool struct"),(0,a.kt)("li",{parentName:"ul"},"IncentivePrefix | pool id | min uptime index | denom | addr \u279d Incentive Record body struct"))),(0,a.kt)("li",{parentName:"ul"},"links",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"positionToLockPrefix | position id \u279d lock id"),(0,a.kt)("li",{parentName:"ul"},"lockToPositionPrefix | lock id \u279d position id"),(0,a.kt)("li",{parentName:"ul"},"PositionPrefix | addr bytes | pool id | position id \u279d boolean"),(0,a.kt)("li",{parentName:"ul"},"PoolPositionPrefix | pool id | position id \u279d boolean")))),(0,a.kt)("p",null,"Note that for storing ticks, we use 9 bytes instead of directly using uint64, first byte being reserved for the Negative / Positive prefix, and the remaining 8 bytes being reserved for the tick itself, which is of uint64. Although we directly store signed integers as values, we use the first byte to indicate and re-arrange tick indexes from negative to positive."),(0,a.kt)("h2",{id:"state-and-keys"},"State and Keys"),(0,a.kt)("h3",{id:"incentive-records"},"Incentive Records"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"KeyIncentiveRecord"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"0x04|")," || ",(0,a.kt)("inlineCode",{parentName:"p"},"string encoding of pool ID")," || ",(0,a.kt)("inlineCode",{parentName:"p"},"|")," || ",(0,a.kt)("inlineCode",{parentName:"p"},"string encoding of min uptime index")," || ",(0,a.kt)("inlineCode",{parentName:"p"},"|")," || ",(0,a.kt)("inlineCode",{parentName:"p"},"string encoding of incentive ID")),(0,a.kt)("p",null,"Note that the reason for having pool ID and min uptime index is so that we can retrieve\nall incentive records for a given pool ID and min uptime index by performing prefix iteration."),(0,a.kt)("h2",{id:"precision-issues-with-price"},"Precision Issues With Price"),(0,a.kt)("p",null,"There are precision issues that we must be considerate of in our design."),(0,a.kt)("p",null,"Consider the balancer pool between ",(0,a.kt)("inlineCode",{parentName:"p"},"arb")," base unit and ",(0,a.kt)("inlineCode",{parentName:"p"},"uosmo"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'osmosisd q gamm pool 1011\npool:\n  \'@type\': /osmosis.gamm.v1beta1.Pool\n  address: osmo1pv6ffw8whyle2nyxhh8re44k4mu4smqd7fd66cu2y8gftw3473csxft8y5\n  future_pool_governor: 24h\n  id: "1011"\n  pool_assets:\n  - token:\n      amount: "101170077995723619690981"\n      denom: ibc/10E5E5B06D78FFBB61FD9F89209DEE5FD4446ED0550CBB8E3747DA79E10D9DC6\n    weight: "536870912000000"\n  - token:\n      amount: "218023341414"\n      denom: uosmo\n    weight: "536870912000000"\n  pool_params:\n    exit_fee: "0.000000000000000000"\n    smooth_weight_change_params: null\n    swap_fee: "0.002000000000000000"\n  total_shares:\n    amount: "18282469846754434906194"\n    denom: gamm/pool/1011\n  total_weight: "1073741824000000"\n')),(0,a.kt)("p",null,"Let's say we want to migrate this into a CL pool where ",(0,a.kt)("inlineCode",{parentName:"p"},"uosmo")," is the quote\nasset and ",(0,a.kt)("inlineCode",{parentName:"p"},"arb")," base unit is the base asset."),(0,a.kt)("p",null,"Note that quote asset is denom1 and base asset is denom0.\nWe want quote asset to be ",(0,a.kt)("inlineCode",{parentName:"p"},"uosmo")," so that limit orders on ticks\nhave tick spacing in terms of ",(0,a.kt)("inlineCode",{parentName:"p"},"uosmo")," as the quote."),(0,a.kt)("p",null,"Note:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OSMO has precision of 6. 1 OSMO = 10**6 ",(0,a.kt)("inlineCode",{parentName:"li"},"uosmo")),(0,a.kt)("li",{parentName:"ul"},"ARB has precision of 18. 1 ARB = 10**18 ",(0,a.kt)("inlineCode",{parentName:"li"},"arb")," base unit")),(0,a.kt)("p",null,"Therefore, the true price of the pool is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},">>> (218023341414 / 10**6)  / (101170077995723619690981 / 10**18)\n2.1550180224553714\n")),(0,a.kt)("p",null,"However, in our core logic it is represented as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"218023341414 / 101170077995723619690981\n2.1550180224553714e-12\n")),(0,a.kt)("p",null,"or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'osmosisd q gamm spot-price 1011 uosmo ibc/10E5E5B06D78FFBB61FD9F89209DEE5FD4446ED0550CBB8E3747DA79E10D9DC6\nspot_price: "0.000000000002155018"\n')),(0,a.kt)("p",null,"As a protocol, we need to accommodate prices that are very far apart.\nIn the example above, the difference between ",(0,a.kt)("inlineCode",{parentName:"p"},"10**6 and 10**18")),(0,a.kt)("p",null,"Most of the native precision is 10",(0,a.kt)("strong",{parentName:"p"},"6. However, most of the ETH\nprecision is 10"),"18."),(0,a.kt)("p",null,"This starts to matter for assets such as ",(0,a.kt)("inlineCode",{parentName:"p"},"upepe"),". That have\na precision of 18 and a very low price level relative to\nthe quote asset that has precision of 6 (e.g ",(0,a.kt)("inlineCode",{parentName:"p"},"uosmo")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"uusdc"),")."),(0,a.kt)("p",null,"The true price of PEPE in USDC terms is ",(0,a.kt)("inlineCode",{parentName:"p"},"0.0000009749"),"."),(0,a.kt)("p",null,'In the "on-chain representation", this would be:\n',(0,a.kt)("inlineCode",{parentName:"p"},"0.0000009749 * 10**6 / 10**18 = 9.749e-19")),(0,a.kt)("p",null,"Note that this is below the minimum precision of ",(0,a.kt)("inlineCode",{parentName:"p"},"sdk.Dec"),"."),(0,a.kt)("p",null,"Additionally, there is a problem with tick to sqrt price conversions\nwhere at small price levels, two sqrt prices can map to the same\ntick."),(0,a.kt)("p",null,"As a workaround, we have decided to limit min spot price to 10^-12\nand min tick to ",(0,a.kt)("inlineCode",{parentName:"p"},"-108000000"),". It has been shown at at price levels\nbelow 10^-12, this issue is most apparent. See this issue for details:\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/osmosis-labs/osmosis/issues/5550"},"https://github.com/osmosis-labs/osmosis/issues/5550")),(0,a.kt)("p",null,"Now, we have a problem that we cannot handle pairs where\nthe quote asset has a precision of 6 and the base asset has a\nprecision of 18."),(0,a.kt)("p",null,"Note that this is not a problem for pairs where the quote asset\nhas a precision of 18 and the base asset has a precision of 6.\nE.g. OSMO/DAI."),(0,a.kt)("h3",{id:"solution"},"Solution"),(0,a.kt)("p",null,"At launch, pool creation is permissioned. Therefore, we can\nensure correctness for the initial set of pools."),(0,a.kt)("p",null,"Long term, we will implement a wrapper contract around concentrated liquidity\nthat will handle the precision issues and scale the prices to all have a precision of at most 12."),(0,a.kt)("p",null,"The contract will have to handle truncation and rounding to determine\nhow to handle dust during this process. The truncated amount can be significant.\nThat being said, this problem is out of scope for this document."),(0,a.kt)("h2",{id:"terminology"},"Terminology"),(0,a.kt)("p",null,"We will use the following terms throughout the document and our codebase:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Tick")," - a unit that has a 1:1 mapping with price")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Bucket")," - an area between two initialized ticks.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Tick Range")," - a general term to describe a concept with lower and upper bound."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Position is defined on a tick range."),(0,a.kt)("li",{parentName:"ul"},"Bucket is defined on a tick range."),(0,a.kt)("li",{parentName:"ul"},"A trader performs a swap over a tick range."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Tick Spacing")," - the distance between two ticks that can be initialized. This is\nwhat defines the minimum bucket size."))),(0,a.kt)("p",null,"Note that ticks are defined inside buckets. Assume tick spacing is 100. A liquidity provider\ncreates a position with amounts such that the current tick is 155 between ticks 100 and 200."),(0,a.kt)("p",null,"Note, that the current tick of 155 is defined inside the bucket over a range of 100 to 200."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Initialized Tick")," - a tick at which LPs can provide liquidity. Some ticks cannot be\ninitialized due to tick spacing. ",(0,a.kt)("inlineCode",{parentName:"p"},"MinCurrentTick")," is an exception due to being 1 tick below\n",(0,a.kt)("inlineCode",{parentName:"p"},"MinInitializedTick"),'. Only initialized ticks are crossed during a swap (see "Crossing Tick")\nfor details.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"MinInitializedTick")," - the minimum tick at which a position can be initialized. When this tick is\ncrossed, all liquidity is consumed at the tick ends up on ",(0,a.kt)("inlineCode",{parentName:"p"},"MinCurrentTick"),". At that point, there\nis no liquidity and the pool is in no bucket. To enter the first bucket, a swap right must be done\nto cross the next initialized tick and kick in the liquidity. If at least one full range position is\ndefined, ",(0,a.kt)("inlineCode",{parentName:"p"},"MinInitializedTick")," will be the first such tick.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"MinCurrentTick")," - is the minimum value that a current tick can take. If we consume all liquidity and\ncross the min initialized tick, our current tick will equal to MinInitializedTick - 1 (MinCurrentTick)\nwith zero liquidity. However, note that this ",(0,a.kt)("inlineCode",{parentName:"p"},"MinCurrentTick")," cannot be crossed. If current tick equals\nto this tick, it is only possible to swap in the right (one for zero) direction.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"MaxTick",(0,a.kt)("inlineCode",{parentName:"p"},"- is the maximum tick at which a position can be initialized. It is also the maximum value that\na current tick can be. Note that this is different from the"),"MinInitializedTick",(0,a.kt)("inlineCode",{parentName:"p"},"and"),"MinCurrentTick",(0,a.kt)("inlineCode",{parentName:"p"},"due\nto our definition of the full range (see below). The full range is inclusive of the lower tick but exclusive\nof the upper tick. As a result, we do not need to differentiate between the two for the max. When the pool\nis on the"),"MaxTick",(0,a.kt)("inlineCode",{parentName:"p"},", there is no liquidity. To kick in the liquidity, a swap left must be done to cross\nthe "),"MaxTick` and enter the last bucket (when sequencing from left to right).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Initialized Range")," - the range of ticks that can be initialized: ",(0,a.kt)("inlineCode",{parentName:"p"},"[MinInitializedTick, MaxTick]"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Full Range")," - the maximum range at which a position can be defined: ",(0,a.kt)("inlineCode",{parentName:"p"},"[MinInitializedTick, MaxTick)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Crossing Tick"),' - crossing a tick means leaving one bucket and entering another. Each tick has a liquidity\nnet value defined. This value measures "how much of liquidity needs to be added to the current when crossing\na tick going left-to-right and entering a new bucket". This value is positive for lower ticks of a position\nand negative for higher. When going left-to-right, instead of adding, we subtract this value from the current liquidity.\nThere are two edge cases. First, when pool crosses a ',(0,a.kt)("inlineCode",{parentName:"p"},"MinInitializedTick"),", the pool does not enter any bucket.\nsince it is now outside of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Full Range"),". Second, when pool crossed a ",(0,a.kt)("inlineCode",{parentName:"p"},"MaxTick"),", the pool does not enter\nany bucket since it is now outside of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Full Range"),". Instead, we treat this being directly on either\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"MinCurrentTick")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"MaxTick"),"."))),(0,a.kt)("h2",{id:"external-sources"},"External Sources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://uniswap.org/whitepaper-v3.pdf"},"Uniswap V3 Whitepaper")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://atiselsts.github.io/pdfs/uniswap-v3-liquidity-math.pdf"},"Technical Note on Liquidity Math"))))}c.isMDXComponent=!0},61010:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/MigrateSuperfluidDelegated-a9a2f0dcb62461f33ad41f20512fdc01.png"},32705:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/MigrateSuperfluidUndelegating-a826ba28914344970cb851ef6c22ca1c.png"},75304:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/SpreadRewardGrowthOutsideCalcuations-6ab1e9fc131fcb9ef740d25fb970bbfb.png"},62933:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/TickUpdates-6daa2a655ccde2ebf1215f78c4232e84.png"},39161:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-1-81b71433054e83d87843b45b7c1f3c52.png"},70202:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-10-4b2a0309c7cb6ce18331b460c94adabe.png"},7841:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-11-70776a28381557a6d399efedb1d2758b.png"},78042:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-12-16c2ffdc79d0a33b081fd3631d91f149.png"},10883:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-13-ab512c2aa0cb9997288941b85a6739cf.png"},47283:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-14-ea1303ee04a3906ddca27050f18625d1.png"},57170:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-15-f4fc556da85f9735612e0b5207ec9393.png"},8673:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-16-f17a42a76c6ec866353cba4856a39765.png"},81788:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-17-9b446f79700d0e1637412a384ca32de5.png"},69323:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-18-6c25c3be68dfb31171f7dd1c233a72e4.png"},90838:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-19-fdd4a1d67e74a2b7e316ba046a0c663d.png"},69092:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-2-6b8fcc3f7cfd7a5d241bf61369eaa894.png"},72576:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-20-5e4d6fa16fb4b5cca5ba3899395e4d5e.png"},52532:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-21-f086c8a25cfdfceb52db8794b0fcac31.png"},97203:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-22-7c0df290d89de4e6526cec83ab740a38.png"},28072:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-23-9848695196f87d361a79cb518a5282a8.png"},75673:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-24-606c3e499352f71549fbc5796ad63796.png"},5784:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-4-e04781a2699b82780a8e39dcdea5febd.png"},36172:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-5-01d0538bcb20aca0f4871ff10e016111.png"},2753:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-6-b1fb77394310e0498a4e89cfe7f6e037.png"},54695:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-7-7ad0dce4658c97b9b55a428b1c19a1a7.png"},28204:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-8-91907d418f1ab22f16f702184624030b.png"},69793:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/eq-9-63345af8e95f46130c267bde0df139d6.png"}}]);
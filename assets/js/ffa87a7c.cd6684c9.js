"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[5988],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),i=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=i(t.components);return a.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,m=s(t,["components","mdxType","originalType","parentName"]),u=i(n),d=r,g=u["".concat(c,".").concat(d)]||u[d]||p[d]||o;return n?a.createElement(g,l(l({ref:e},m),{},{components:n})):a.createElement(g,l({ref:e},m))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:r,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8116:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={},l="Javascript & Smart Contracts",s={unversionedId:"javascript",id:"javascript",title:"Javascript & Smart Contracts",description:"This guide describes interacting with Osmosis Smart contracts via JavaScript runtimes such as Node.js and the browser.",source:"@site/docs/cosmwasm/javascript.md",sourceDirName:".",slug:"/javascript",permalink:"/cosmwasm/javascript",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/cosmwasm/javascript.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scripts and Tests with cw-orchestrator",permalink:"/cosmwasm/cw-orch"}},c={},i=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Run it",id:"run-it",level:2},{value:"Other methods",id:"other-methods",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Codes",id:"codes",level:2},{value:"Smart Contracts",id:"smart-contracts",level:2},{value:"Get contract",id:"get-contract",level:2},{value:"Get the count from the contract",id:"get-the-count-from-the-contract",level:2}],m={toc:i};function p(t){let{components:e,...o}=t;return(0,r.kt)("wrapper",(0,a.Z)({},m,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript--smart-contracts"},"Javascript & Smart Contracts"),(0,r.kt)("p",null,"This guide describes interacting with Osmosis Smart contracts via JavaScript runtimes such as Node.js and the browser."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"npm and node.js"),(0,r.kt)("li",{parentName:"ul"},"localosmosis - (Not needed when connecting to mainnet)"),(0,r.kt)("li",{parentName:"ul"},"Keplr browser not used on the guide yet")),(0,r.kt)("p",null,"Start a new project"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\n")),(0,r.kt)("p",null,"Install cosmwasm"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i cosmwasm\n")),(0,r.kt)("p",null,"Open the package.json file in a code editor and add "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json="},'"type": "module",.\n\n  {\n        // ...\n        "type": "module",\n        // ...\n    }\n')),(0,r.kt)("p",null,"Create a new index.ts file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"touch index.ts\n")),(0,r.kt)("p",null,"The class CosmWasmClient is exported from the CosmJS package @cosmjs/cosmwasm-stargate. Learn more in the ",(0,r.kt)("a",{parentName:"p",href:"https://cosmwasm.github.io/CosmWasmJS/clients/reading/CosmWasmClient.html"},"official docs"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript="},'import { CosmWasmClient } from "cosmwasm";\n\n// This is your rpc endpoint\nconst rpcEndpoint = "http://localhost:26657/";\n\nasync function main() {\n  const client = await CosmWasmClient.connect(rpcEndpoint);\n  console.log(client);\n}\n\nmain();\n')),(0,r.kt)("p",null,":: tip\nYou can also connect to the mainnet by replacing rpcEndpoint to ",(0,r.kt)("a",{parentName:"p",href:"https://rpc.osmosis.zone/"},"https://rpc.osmosis.zone/"),"\n::"),(0,r.kt)("h2",{id:"run-it"},"Run it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm index.js\n")),(0,r.kt)("p",null,"You should see something like:\n",(0,r.kt)("img",{parentName:"p",src:"https://hackmd.io/_uploads/BJSUggXD9.png",alt:null})),(0,r.kt)("h2",{id:"other-methods"},"Other methods"),(0,r.kt)("p",null,"As documented on the ",(0,r.kt)("a",{parentName:"p",href:"https://cosmwasm.github.io/CosmWasmJS/clients/reading/CosmWasmClient.html#available-methods"},"official docs"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript="},'async function moreExamples() {\n  const client = await CosmWasmClient.connect(rpcEndpoint);\n  const chainId = await client.getChainId()\n  const getHeight = await client.getHeight()\n  const getAccount = await client.getAccount("osmo1phaxpevm5wecex2jyaqty2a4v02qj7qmlmzk5a")\n  const getSequence = await client.getSequence("osmo1phaxpevm5wecex2jyaqty2a4v02qj7qmlmzk5a")\n  const getBlock = await client.getBlock(1)\n  const getBalance = await client.getBalance("osmo1phaxpevm5wecex2jyaqty2a4v02qj7qmlmzk5a","uosmo")\n\n  console.log(chainId);\n  console.log(client);\n  console.log(getHeight);\n  console.log(getAccount);\n  console.log(getSequence);\n  console.log(getBlock);\n  console.log(getBalance);\n}\n\nmoreExamples();\n')),(0,r.kt)("h2",{id:"transactions"},"Transactions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Params"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".getTx()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"id: string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".searchTx()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"query: SearchTxQuery, filter: SearchTxFilter = {}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".txsQuery()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"query: string")))),(0,r.kt)("h2",{id:"codes"},"Codes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Params"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".getCodes()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"none")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".getCodeDetails()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"codeId: number")))),(0,r.kt)("h2",{id:"smart-contracts"},"Smart Contracts"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Params"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".getContracts()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"cideId: number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".getContract()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"address: string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".queryContractRaw()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"address: string, key: Uint8Array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".queryContractSmart()"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"address: string, queryMsg: Record<string, unknown>")))),(0,r.kt)("h1",{id:"querying-smart-contracts"},"Querying Smart Contracts"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Before we query smart contracts in localOsmosis we must ",(0,r.kt)("a",{parentName:"p",href:"/cosmwasm/local/localosmosis"},"deploy one by following this guide"),". ")),(0,r.kt)("p",null,"Once you have deployed the smart contract you can get the ",(0,r.kt)("inlineCode",{parentName:"p"},"<CONTRACT-ID>")," by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"osmosisd query wasm list-code\n")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(62213).Z,width:"957",height:"490"}),"\nIn this particular example there are 7 contracts available. The latest one is 7."),(0,r.kt)("p",null,"You can now get the contract address by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"osmosisd query wasm list-contract-by-code <CONTRACT-ID>\n\n")),(0,r.kt)("p",null,"That's the contract address ",(0,r.kt)("inlineCode",{parentName:"p"},"osmo1zlmaky7753d2fneyhduwz0rn3u9ns8rse3tudhze8rc2g54w9ysq725p3a")," for code contract id 7."),(0,r.kt)("h2",{id:"get-contract"},"Get contract"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { CosmWasmClient } from "cosmwasm";\n\n// This is your rpc endpoint\nconst rpcEndpoint = "http://localhost:26657/";\n\nasync function queryContract() {\n  const client = await CosmWasmClient.connect(rpcEndpoint);\n \n    const getContract = await client.getContract("osmo1zlmaky7753d2fneyhduwz0rn3u9ns8rse3tudhze8rc2g54w9ysq725p3a")\n    console.log(getContract);\n}\n\nqueryContract();\n\n')),(0,r.kt)("p",null,"Run the code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"node index.js\n")),(0,r.kt)("p",null,"The output should look like this:\n",(0,r.kt)("img",{src:n(57117).Z,width:"717",height:"512"})),(0,r.kt)("h2",{id:"get-the-count-from-the-contract"},"Get the count from the contract"),(0,r.kt)("p",null,"The contract we are interacting with has a few simple functions. 'get_count', 'increment' and 'reset'. These two functions can be called by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"queryContractSmart")," method. "),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Please note there is a complete guide on how to upload the example contract on localOsmosis ",(0,r.kt)("a",{parentName:"p",href:"/cosmwasm/local/localosmosis"},"here"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'async function getCount() {\n    const client = await CosmWasmClient.connect(rpcEndpoint);\n\n    const getCount = await client.queryContractSmart("osmo1zlmaky7753d2fneyhduwz0rn3u9ns8rse3tudhze8rc2g54w9ysq725p3a",{ "get_count": {}})\n    console.log(getCount);\n}\ngetCount();\n\n')))}p.isMDXComponent=!0},62213:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/contracts-list-ac83f367fd7c9a97facb97b2adcef73c.png"},57117:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/contract_details-31d12d8473e8fc18f64138da2e3f903d.png"}}]);
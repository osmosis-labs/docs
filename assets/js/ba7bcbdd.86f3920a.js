"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[2451],{3905:(e,t,s)=>{s.d(t,{Zo:()=>p,kt:()=>u});var o=s(67294);function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,o)}return s}function r(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){n(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function i(e,t){if(null==e)return{};var s,o,n=function(e,t){if(null==e)return{};var s,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)s=a[o],t.indexOf(s)>=0||(n[s]=e[s]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)s=a[o],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):r(r({},t),e)),s},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var s=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(s),u=n,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return s?o.createElement(h,r(r({ref:t},p),{},{components:s})):o.createElement(h,r({ref:t},p))}));function u(e,t){var s=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=s.length,r=new Array(a);r[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,r[1]=i;for(var c=2;c<a;c++)r[c]=s[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,s)}d.displayName="MDXCreateElement"},83599:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=s(87462),n=(s(67294),s(3905));const a={},r="Running a Node on Testnet",i={unversionedId:"validate/joining-testnet",id:"validate/joining-testnet",title:"Running a Node on Testnet",description:"Osmosis Installer",source:"@site/docs/overview/validate/joining-testnet.md",sourceDirName:"validate",slug:"/validate/joining-testnet",permalink:"/overview/validate/joining-testnet",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/overview/validate/joining-testnet.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Running a Node on Mainnet",permalink:"/overview/validate/joining-mainnet"},next:{title:"Validating On Mainnet",permalink:"/overview/validate/validating-mainnet"}},l={},c=[{value:"Osmosis Installer",id:"osmosis-installer",level:2},{value:"Osmosis CLI",id:"osmosis-cli",level:2},{value:"Faucet",id:"faucet",level:2},{value:"Initialize Osmosis Node",id:"initialize-osmosis-node",level:2},{value:"Set Up Cosmovisor",id:"set-up-cosmovisor",level:2},{value:"Download Chain Data",id:"download-chain-data",level:2},{value:"Set Up Osmosis Service",id:"set-up-osmosis-service",level:2},{value:"Start Osmosis Service",id:"start-osmosis-service",level:2},{value:"Update Cosmovisor to V7",id:"update-cosmovisor-to-v7",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"running-a-node-on-testnet"},"Running a Node on Testnet"),(0,n.kt)("h2",{id:"osmosis-installer"},"Osmosis Installer"),(0,n.kt)("p",null,"Join a network by using Osmosis Installer from ",(0,n.kt)("a",{parentName:"p",href:"https://get.osmosis.zone"},"https://get.osmosis.zone")," "),(0,n.kt)("p",null,(0,n.kt)("img",{src:s(24745).Z,width:"1420",height:"1140"})),(0,n.kt)("p",null,"Simply run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"curl -sL https://get.osmosis.zone/install > i.py && python3 i.py\n")),(0,n.kt)("h2",{id:"osmosis-cli"},"Osmosis CLI"),(0,n.kt)("p",null,"Make sure you have ",(0,n.kt)("a",{parentName:"p",href:"../osmosis-core/osmosisd"},"installed the Osmosis Binary (CLI)")," prior to following the below instructions."),(0,n.kt)("p",null,"You may also ",(0,n.kt)("a",{parentName:"p",href:"../osmosis-core/osmosisd"},"use the Osmosis installer")," if you want everything to be done automatically."),(0,n.kt)("h2",{id:"faucet"},"Faucet"),(0,n.kt)("p",null,"In order to get testnet tokens use  ",(0,n.kt)("a",{parentName:"p",href:"https://faucet.osmosis.zone/"},"https://faucet.osmosis.zone/")),(0,n.kt)("h2",{id:"initialize-osmosis-node"},"Initialize Osmosis Node"),(0,n.kt)("p",null,"Use osmosisd to initialize your node (replace the ",(0,n.kt)("inlineCode",{parentName:"p"},"NODE_NAME")," with a name of your choosing):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd init NODE_NAME --chain-id=osmo-test-5\n")),(0,n.kt)("p",null,"Open the config.toml to edit the seeds and persistent peers:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd $HOME/.osmosisd/config\nnano config.toml\n")),(0,n.kt)("p",null,'Use page down or arrow keys to get to the line that says seeds = "" and replace it with the following:'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'seeds = "0f9a9c694c46bd28ad9ad6126e923993fc6c56b1@137.184.181.105:26656"\n')),(0,n.kt)("p",null,"Next, add persistent peers:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'persistent_peers = "4ab030b7fd75ed895c48bcc899b99c17a396736b@137.184.190.127:26656,3dbffa30baab16cc8597df02945dcee0aa0a4581@143.198.139.33:26656"\n')),(0,n.kt)("p",null,"Then press ",(0,n.kt)("inlineCode",{parentName:"p"},"Ctrl+O")," then enter to save, then ",(0,n.kt)("inlineCode",{parentName:"p"},"Ctrl+X")," to exit"),(0,n.kt)("h2",{id:"set-up-cosmovisor"},"Set Up Cosmovisor"),(0,n.kt)("p",null,"Set up cosmovisor to ensure future upgrades happen flawlessly. To install Cosmovisor:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"go install github.com/cosmos/cosmos-sdk/cosmovisor/cmd/cosmovisor@v1.0.0\n")),(0,n.kt)("p",null,"Create the required directories:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ~/.osmosisd/cosmovisor\nmkdir -p ~/.osmosisd/cosmovisor/genesis\nmkdir -p ~/.osmosisd/cosmovisor/genesis/bin\nmkdir -p ~/.osmosisd/cosmovisor/upgrades\n")),(0,n.kt)("p",null,"Set the environment variables:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'echo "# Setup Cosmovisor" >> ~/.profile\necho "export DAEMON_NAME=osmosisd" >> ~/.profile\necho "export DAEMON_HOME=$HOME/.osmosisd" >> ~/.profile\necho "export DAEMON_ALLOW_DOWNLOAD_BINARIES=false" >> ~/.profile\necho "export DAEMON_LOG_BUFFER_SIZE=512" >> ~/.profile\necho "export DAEMON_RESTART_AFTER_UPGRADE=true" >> ~/.profile\necho "export UNSAFE_SKIP_BACKUP=true" >> ~/.profile\nsource ~/.profile\n')),(0,n.kt)("p",null,"You may leave out ",(0,n.kt)("inlineCode",{parentName:"p"},"UNSAFE_SKIP_BACKUP=true"),", however the backup takes a decent amount of time and public snapshots of old states are available."),(0,n.kt)("p",null,"Download and replace the genesis file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd $HOME/.osmosisd/config\nwget https://github.com/osmosis-labs/networks/raw/main/osmo-test-5/genesis.tar.bz2\ntar -xjf genesis.tar.bz2 && rm genesis.tar.bz2\n")),(0,n.kt)("p",null,"Copy the current osmosisd binary into the cosmovisor/genesis folder:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cp $GOPATH/bin/osmosisd ~/.osmosisd/cosmovisor/genesis/bin\n")),(0,n.kt)("p",null,"To check your work, ensure the version of cosmovisor and osmosisd are the same:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cosmovisor version\nosmosisd version\n")),(0,n.kt)("p",null,"These two command should both output 7.0.3"),(0,n.kt)("p",null,"Reset private validator file to genesis state:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd unsafe-reset-all\n")),(0,n.kt)("h2",{id:"download-chain-data"},"Download Chain Data"),(0,n.kt)("p",null,"Download the latest chain data from a snapshot provider. In the following commands, I will use ",(0,n.kt)("a",{href:"https://quicksync.io/networks/osmosis.html",target:"_blank"},(0,n.kt)("a",{parentName:"p",href:"https://quicksync.io/networks/osmosis.html"},"https://quicksync.io/networks/osmosis.html"))," to download the chain data. You may choose the pruned or archive based on your needs."),(0,n.kt)("p",null,"Download liblz4-tool to handle the compressed file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install wget liblz4-tool aria2 -y\n")),(0,n.kt)("p",null,"Download the chain data:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Select the tab to the desired node type (Pruned or Archive)")),(0,n.kt)("p",null,'::::::: tabs :options="{ useUrlFragment: false }"'),(0,n.kt)("p",null,":::::: tab Pruned"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmotestnet-4-pruned")|select (.mirror=="Netherlands")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n')),(0,n.kt)("p",null,"::::::"),(0,n.kt)("p",null,":::::: tab Archive"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmotestnet-4-archive")|select (.mirror=="Netherlands")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n')),(0,n.kt)("p",null,"::::::"),(0,n.kt)("p",null,":::::::"),(0,n.kt)("h2",{id:"set-up-osmosis-service"},"Set Up Osmosis Service"),(0,n.kt)("p",null,"Set up a service to allow cosmovisor to run in the background as well as restart automatically if it runs into any problems:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'echo "[Unit]\nDescription=Cosmovisor daemon\nAfter=network-online.target\n[Service]\nEnvironment="DAEMON_NAME=osmosisd"\nEnvironment="DAEMON_HOME=${HOME}/.osmosisd"\nEnvironment="DAEMON_RESTART_AFTER_UPGRADE=true"\nEnvironment="DAEMON_ALLOW_DOWNLOAD_BINARIES=false"\nEnvironment="DAEMON_LOG_BUFFER_SIZE=512"\nEnvironment="UNSAFE_SKIP_BACKUP=true"\nUser=$USER\nExecStart=${HOME}/go/bin/cosmovisor run start\nRestart=always\nRestartSec=3\nLimitNOFILE=infinity\nLimitNPROC=infinity\n[Install]\nWantedBy=multi-user.target\n" >cosmovisor.service\n')),(0,n.kt)("p",null,"Move this new file to the systemd directory:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mv cosmovisor.service /etc/systemd/system/cosmovisor.service\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Previously, this documentation suggested to move the systemd unit file to:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre"},"/lib/systemd/system/cosmovisor.service\n")),(0,n.kt)("p",{parentName:"admonition"},"If dealing with a server that may have followed older instructions, you may consider looking there.")),(0,n.kt)("h2",{id:"start-osmosis-service"},"Start Osmosis Service"),(0,n.kt)("p",null,"Reload and start the service:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsystemctl restart systemd-journald\nsudo systemctl start cosmovisor\n")),(0,n.kt)("p",null,"Check the status of the service:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl status cosmovisor\n")),(0,n.kt)("p",null,"To see live logs of the service:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"journalctl -u cosmovisor -f\n")),(0,n.kt)("h2",{id:"update-cosmovisor-to-v7"},"Update Cosmovisor to V7"),(0,n.kt)("p",null,"If you want osmosisd to upgrade automatically from V6 to V7, do the following steps prior to the upgrade height (3215657):"),(0,n.kt)("p",null,"This step is only needed if syncing from genesis and haven't passed block 3215657 yet."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ~/.osmosisd/cosmovisor/upgrades/v7/bin\ncd $HOME/osmosis\ngit pull\ngit checkout v10.0.1\nmake build\nsystemctl stop cosmovisor.service\ncp build/osmosisd ~/.osmosisd/cosmovisor/upgrades/v7/bin\nsystemctl start cosmovisor.service\ncd $HOME\n")))}m.isMDXComponent=!0},24745:(e,t,s)=>{s.d(t,{Z:()=>o});const o=s.p+"assets/images/installer_11-e276ada29465c2eae1906b076939bc0f.png"}}]);
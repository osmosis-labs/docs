"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[9410],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(k,s(s({ref:t},p),{},{components:n})):a.createElement(k,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},66807:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},s="Beaker",i={unversionedId:"README",id:"README",title:"Beaker",description:"Beaker makes it easy to scaffold a new cosmwasm app, with all of the dependencies for osmosis hooked up, interactive console, and a sample front-end at the ready.",source:"@site/docs/beaker/README.md",sourceDirName:".",slug:"/",permalink:"/beaker/",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/beaker/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Beaker Commands",permalink:"/beaker/commands/"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Reference",id:"reference",level:3},{value:"Getting Started",id:"getting-started-1",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Installation",id:"installation",level:3},{value:"Scaffolding your new dapp project",id:"scaffolding-your-new-dapp-project",level:3},{value:"<code>frontend</code> and <code>contracts</code>",id:"frontend-and-contracts",level:4},{value:"<code>Cargo.toml</code>",id:"cargotoml",level:4},{value:"<code>Beaker.toml</code>",id:"beakertoml",level:4},{value:"<code>.beaker</code>",id:"beaker-1",level:4},{value:"Your first CosmWasm contract with Beaker",id:"your-first-cosmwasm-contract-with-beaker",level:3},{value:"Deploy contract on LocalOsmosis",id:"deploy-contract-on-localosmosis",level:3},{value:"Contract Upgrade",id:"contract-upgrade",level:3},{value:"Execute Contract Messages",id:"execute-contract-messages",level:3},{value:"Query Contract State",id:"query-contract-state",level:3},{value:"Signers",id:"signers",level:3},{value:"Console",id:"console",level:3},{value:"Typescript SDK Generation",id:"typescript-sdk-generation",level:3},{value:"Frontend",id:"frontend",level:3},{value:"License",id:"license",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"beaker"},"Beaker"),(0,r.kt)("p",{align:"center"},(0,r.kt)("a",{href:"https://docs.osmosis.zone/cosmwasm/"},(0,r.kt)("img",{src:"/icons/beaker.svg",alt:"Beaker logo",title:"Beaker",width:"150",align:"center",height:"150"}))),(0,r.kt)("p",{align:"center",width:"100%"},(0,r.kt)("img",{height:"20",src:"https://github.com/osmosis-labs/beaker/actions/workflows/doctest.yml/badge.svg"}),(0,r.kt)("img",{height:"20",src:"https://github.com/osmosis-labs/beaker/actions/workflows/lint.yml/badge.svg"}),(0,r.kt)("a",{href:"https://github.com/osmosis-labs/beaker/blob/main/LICENSE-APACHE"},(0,r.kt)("img",{height:"20",src:"https://img.shields.io/badge/license-APACHE-blue.svg"})),(0,r.kt)("a",{href:"https://github.com/osmosis-labs/beaker/blob/main/LICENSE-MIT"},(0,r.kt)("img",{height:"20",src:"https://img.shields.io/badge/license-MIT-blue.svg"})),(0,r.kt)("a",{href:"https://deps.rs/repo/github/osmosis-labs/beaker"},(0,r.kt)("img",{height:"20",src:"https://deps.rs/repo/github/osmosis-labs/beaker/status.svg"})),(0,r.kt)("a",{href:"https://crates.io/crates/beaker"},(0,r.kt)("img",{height:"20",src:"https://img.shields.io/crates/v/beaker.svg"}))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/osmosis-labs/beaker"},"Beaker")," makes it easy to scaffold a new cosmwasm app, with all of the dependencies for osmosis hooked up, interactive console, and a sample front-end at the ready."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("h3",{id:"getting-started"},"Getting Started"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prerequisites"},"Prerequisites")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#scaffolding-your-new-dapp-project"},"Scaffolding your new dapp project"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#frontend-and-contracts"},(0,r.kt)("inlineCode",{parentName:"a"},"frontend")," and ",(0,r.kt)("inlineCode",{parentName:"a"},"contracts"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#cargotoml"},(0,r.kt)("inlineCode",{parentName:"a"},"Cargo.toml"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#beakertoml"},(0,r.kt)("inlineCode",{parentName:"a"},"Beaker.toml"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#beaker-1"},(0,r.kt)("inlineCode",{parentName:"a"},".beaker"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#your-first-cosmwasm-contract-with-beaker"},"Your first CosmWasm contract with Beaker")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#deploy-contract-on-localosmosis"},"Deploy contract on LocalOsmosis")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#contract-upgrade"},"Contract Upgrade")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#signers"},"Signers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#console"},"Console")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#typescript-sdk-generation"},"Typescript SDK Generation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#frontend"},"Frontend"))),(0,r.kt)("h3",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/beaker/commands/"},"Command")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/beaker/config/"},"Config"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getting-started-1"},"Getting Started"),(0,r.kt)("p",null,"This section is intended to give you an introduction to ",(0,r.kt)("inlineCode",{parentName:"p"},"Beaker"),", for more detailed reference, you can find them ",(0,r.kt)("a",{parentName:"p",href:"/beaker/commands/"},"here"),"."),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.rust-lang.org/tools/install"},"Rust")," for building cosmwasm contract",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://rustup.rs/"},"Rustup")," for dealing with wasm target"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker")," for running wasm ",(0,r.kt)("inlineCode",{parentName:"li"},"rust-optimizer")," and spinning up ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/osmosis-labs/localosmosis"},"LocalOsmosis")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"Node")," for frontend related stuffs and ",(0,r.kt)("inlineCode",{parentName:"li"},"beaker-console"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://yarnpkg.com/"},"Yarn")," over NPM, since it will not have package resolving issue and causes weird errors down the road")))),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Beaker is available via ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/getting-started/installation.html"},"cargo")," which is a rust toolchain. Once cargo is ready on your machine, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cargo install -f beaker # `-f` flag for up-to-date version\n")),(0,r.kt)("p",null,"Now ",(0,r.kt)("inlineCode",{parentName:"p"},"beaker")," is ready to use!"),(0,r.kt)("h3",{id:"scaffolding-your-new-dapp-project"},"Scaffolding your new dapp project"),(0,r.kt)("p",null,"In the directory you want your project to reside, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker new counter-dapp\n")),(0,r.kt)("p",null,"This will generate new directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"counter-dapp")," which, by default, come from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/osmosis-labs/beaker/tree/main/templates/project"},"this template"),"."),(0,r.kt)("p",null,"So what's in the template? Let's have a look..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 frontend\n\u251c\u2500\u2500 contracts\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Beaker.toml\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 .beaker\n")),(0,r.kt)("h4",{id:"frontend-and-contracts"},(0,r.kt)("inlineCode",{parentName:"h4"},"frontend")," and ",(0,r.kt)("inlineCode",{parentName:"h4"},"contracts")),(0,r.kt)("p",null,"These should be self explanatory, it's where frontend and contracts are stored. And as you might be able to guess from the name, one project can contain multiple contracts."),(0,r.kt)("h4",{id:"cargotoml"},(0,r.kt)("inlineCode",{parentName:"h4"},"Cargo.toml")),(0,r.kt)("p",null,"There is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," here which specifies ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html"},"cargo workspace"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[workspace]\n\nmembers = [\n  'contracts/*',\n]\n\n[profile.release]\n...\n")),(0,r.kt)("p",null,"All the crates (rust packages) in contracts directory are included, with unified release profile. With this, when we have to optimize multiple contracts deterministically, we can do that with ease (see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/rust-optimizer#contracts-as-workspace-members"},"Contracts as Workspace Members section in rust-optimizer"),")."),(0,r.kt)("h4",{id:"beakertoml"},(0,r.kt)("inlineCode",{parentName:"h4"},"Beaker.toml")),(0,r.kt)("p",null,"This is our configuration file, you can find more information about it ",(0,r.kt)("a",{parentName:"p",href:"/beaker/config/"},"here"),"."),(0,r.kt)("h4",{id:"beaker-1"},(0,r.kt)("inlineCode",{parentName:"h4"},".beaker")),(0,r.kt)("p",null,"Last but not least, ",(0,r.kt)("inlineCode",{parentName:"p"},".beaker")," which is the most unusual part. It contains 2 files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 state.json\n\u2514\u2500\u2500 state.local.json\n")),(0,r.kt)("p",null,"These 2 files have similar functionality, which are containing beaker related state such as ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"code-id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," for each contract on each network for later use."),(0,r.kt)("p",null,"While ",(0,r.kt)("inlineCode",{parentName:"p"},"state.json")," is there for mainnet and testnet state. ",(0,r.kt)("inlineCode",{parentName:"p"},"state.local.json")," is intended to use locally and ",(0,r.kt)("em",{parentName:"p"},"being gitignored")," since its state will not make any sense on other's machine."),(0,r.kt)("p",null,"And I don't think we have to explain about ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore")," don't we?"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"your-first-cosmwasm-contract-with-beaker"},"Your first CosmWasm contract with Beaker"),(0,r.kt)("p",null,"After that we can create new contract (the command uses template from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/InterWasm/cw-template"},"cw-template"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd counter-dapp\nbeaker wasm new counter\n")),(0,r.kt)("p",null,"Now your new contract will be available on ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts/counter"),"."),(0,r.kt)("p",null,"If you want to use other contract template, you can change the configuration, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'# Beaker.toml\n\n[wasm]\ntemplate_repo = "https://github.com/osmosis-labs/cw-tpl-osmosis.git"\n')),(0,r.kt)("h3",{id:"deploy-contract-on-localosmosis"},"Deploy contract on LocalOsmosis"),(0,r.kt)("p",null,"LocalOsmosis, as its name suggest, is Osmosis for local development. In the upcoming release, Beaker will have more complete integration with LocalOsmosis, it has to be installed and run separately."),(0,r.kt)("p",null,"You can install from source by following the instruction at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/osmosis-labs/LocalOsmosis"},"osmosis-labs/LocalOsmosis"),", or use the official installer and select option 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"curl -sL https://get.osmosis.zone/install > i.py && python3 i.py\n")),(0,r.kt)("p",null,"After that, ",(0,r.kt)("inlineCode",{parentName:"p"},"counter")," contract can be deployed (build + store-code + instantiate) using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm deploy counter --signer-account test1 --no-wasm-opt --raw '{ \"count\": 0 }'\n")),(0,r.kt)("p",null,"What's happening here equivalent to the following command sequence:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"# build .wasm file\n# stored in `target/wasm32-unknown-unknown/release/<CONTRACT_NAME>.wasm`\n# `--no-wasm-opt` is suitable for development, explained below\nbeaker wasm build --no-wasm-opt\n\n# read .wasm in `target/wasm32-unknown-unknown/release/<CONTRACT_NAME>.wasm` due to `--no-wasm-opt` flag\n# use `--signer-account test1` which is predefined.\n# The list of all predefined accounts are here: https://github.com/osmosis-labs/LocalOsmosis#accounts\n# `code-id` is stored in the beaker state, local by default\nbeaker wasm store-code counter --signer-account test1 --no-wasm-opt\n\n# instantiate counter contract\n# with instantiate msg: '{ \"count\": 0 }'\nbeaker wasm instantiate counter --signer-account test1 --raw '{ \"count\": 0 }'\n")),(0,r.kt)("p",null,"The flag ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-wasm-opt")," is skipping ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/rust-optimizer"},"rust-optimizer")," for faster development iteration."),(0,r.kt)("p",null,"For testnet/mainnet deployment, use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm deploy counter --signer-account <ACCOUNT> --raw '{ \"count\": 0 }' --network testnet\nbeaker wasm deploy counter --signer-account <ACCOUNT> --raw '{ \"count\": 0 }' --network mainnet\n")),(0,r.kt)("p",null,"Instantiate message can be stored for later use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir contracts/counter/instantiate-msgs\necho '{ \"count\": 0 }' > contracts/counter/instantiate-msgs/default.json\nbeaker wasm deploy counter --signer-account test1 --no-wasm-opt\n")),(0,r.kt)("p",null,"You can find references for ",(0,r.kt)("a",{parentName:"p",href:"/beaker/commands/beaker_wasm"},(0,r.kt)("inlineCode",{parentName:"a"},"beaker wasm")," subcommand here"),"."),(0,r.kt)("h3",{id:"contract-upgrade"},"Contract Upgrade"),(0,r.kt)("p",null,"Contract upgrade in CosmWasm goes through the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"store new code on to the chain"),(0,r.kt)("li",{parentName:"ol"},"broadcast migrate msg, targeting the contract address that wanted to be upgraded with the newly stored code")),(0,r.kt)("p",null,"To make a contract migratable, the contract needs to have proper entrypoint and admin designated."),(0,r.kt)("p",null,"To create the contract entrypoint for migration, first, define ",(0,r.kt)("inlineCode",{parentName:"p"},"MigrateMsg")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.rs"),", this could have any information you want to pass for migration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct MigrateMsg {}\n")),(0,r.kt)("p",null,"With MigrateMsg defined we need to update ",(0,r.kt)("inlineCode",{parentName:"p"},"contract.rs"),". First update the import from ",(0,r.kt)("inlineCode",{parentName:"p"},"create::msg")," to include ",(0,r.kt)("inlineCode",{parentName:"p"},"MigrateMsg"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use create::msg::{CountResponse, ExecuteMsg, InstantiateMsg, QueryMsg, MigrateMsg};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg_attr(not(feature = "library"), entry_point)]\npub fn migrate(_deps: DepsMut, _env: Env, _msg: MigrateMsg) -> StdResult<Response> {\n    // perform state update or anything necessary for the migration\n    Ok(Response::default())\n}\n')),(0,r.kt)("p",null,"Now deploy the contract with admin assigned"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"# `--admin signer` use signer address (test1's address in this case) as designated admin\n# raw address could be passed in as well\nbeaker wasm deploy counter --signer-account test1 --no-wasm-opt --raw '{ \"count\": 0 }' --admin signer\n")),(0,r.kt)("p",null,"Now try to change the execute logic a bit to see if the upgrade works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn try_increment(deps: DepsMut) -> Result<Response, ContractError> {\n    STATE.update(deps.storage, |mut state| -> Result<_, ContractError> {\n        state.count += 1000000000; // 1 -> 1000000000\n        Ok(state)\n    })?;\n\n    Ok(Response::new().add_attribute("method", "try_increment"))\n}\n')),(0,r.kt)("p",null,"With admin as ",(0,r.kt)("inlineCode",{parentName:"p"},"test1"),", only ",(0,r.kt)("inlineCode",{parentName:"p"},"test1")," can upgrade the contract"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm upgrade counter --signer-account test1 --raw '{}' --no-wasm-opt\n")),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"upgrade")," is basically running sequences of commands behind the scene:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm build --no-wasm-opt\nbeaker wasm store-code counter --signer-account test1 --no-wasm-opt\nbeaker wasm migrate counter --signer-account test1 --raw '{}'\n")),(0,r.kt)("p",null,"And, like before, ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-wasm-opt")," only means for development. For mainnet, use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm upgrade counter --signer-account test1 --raw '{}' --network mainnet\n")),(0,r.kt)("p",null,"Migrate message can be stored for later use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir contracts/counter/migrate-msgs\necho '{}' > contracts/counter/migrate-msgs/default.json\nbeaker wasm upgrade counter --signer-account test1 --no-wasm-opt\n")),(0,r.kt)("p",null,"You can find more information about their options ",(0,r.kt)("a",{parentName:"p",href:"/beaker/commands/beaker_wasm"},"here"),"."),(0,r.kt)("h3",{id:"execute-contract-messages"},"Execute Contract Messages"),(0,r.kt)("p",null,"Contract messages can be executed using the ",(0,r.kt)("inlineCode",{parentName:"p"},"beaker wasm execute")," subcommand. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm execute counter --raw '{ \"increment\": {} }' --signer-account test1\n")),(0,r.kt)("h3",{id:"query-contract-state"},"Query Contract State"),(0,r.kt)("p",null,"You can query contract state by submitting query messages with the ",(0,r.kt)("inlineCode",{parentName:"p"},"beaker wasm query")," command. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm query counter --raw '{\"get_count\": {}}'\n")),(0,r.kt)("h3",{id:"signers"},"Signers"),(0,r.kt)("p",null,"Whenever you run command that requires signing transactions, there are 3 options you can reference your private keys:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--signer-account")," input of this option refer to the accounts defined in the ",(0,r.kt)("a",{parentName:"li",href:"/beaker/config/global"},"config file"),", which is not encrypted, so it should be used only for testing"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--signer-mnemonic")," input of this option is the raw mnemonic string to construct a signer"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--signer-private-key")," input of this option is the same as ",(0,r.kt)("inlineCode",{parentName:"li"},"--signer-mnemonic")," except it expects base64 encoded private key"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--signer-keyring")," use the OS secure store as backend to securely store your key. To manage them, you can find more information ",(0,r.kt)("a",{parentName:"li",href:"/beaker/commands/beaker_key"},"here"),".")),(0,r.kt)("h3",{id:"console"},"Console"),(0,r.kt)("p",null,"After deployed, you can play with the deployed contract using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker console\n")),(0,r.kt)("p",null,"It might prompt you like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"? Project's Typescript SDK seems to be missing, would you like to generate? \n")),(0,r.kt)("p",null,"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"enter")," to proceed for now, and we will discuss about it in detail in the ",(0,r.kt)("a",{parentName:"p",href:"#typescript-sdk-generation"},"Typescript SDK Generation")," section."),(0,r.kt)("p",null,"This will launch custom node repl, where ",(0,r.kt)("inlineCode",{parentName:"p"},"contract"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"account")," are available.\n",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," contains deployed contract.\n",(0,r.kt)("inlineCode",{parentName:"p"},"account")," contains ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/osmosis-labs/LocalOsmosis#accounts"},"pre-defined accounts in localosmosis"),"."),(0,r.kt)("p",null,"So you can interact with the recently deployed contract like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await contract.counter.signer(account.test1).execute({ increment: {} });\nawait contract.counter.query({ get_count: {} });\n")),(0,r.kt)("p",null,"You can find available methods for the aforementioned instances here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/beaker/console/classes/Account#methods-1"},"Account")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/beaker/console/classes/Contract#methods-1"},"Contract"))),(0,r.kt)("p",null,"You can remove ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"account")," namespace by changing config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Beaker.toml\n\n[console]\naccount_namespace = false\ncontract_namespace = false\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await counter.signer(test1).execute({ increment: {} });\nawait counter.query({ get_count: {} });\n")),(0,r.kt)("p",null,"With the Typescript SDK which was previously mentioned, it is used to extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract")," instance with method generated ftom execute and query messages. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await counter.getCount()\n\nsc = counter.signer(test1) // create signing client for `counter` with `test1`\n\nawait sc.increment()\nawait sc.getCount()\n")),(0,r.kt)("p",null,"With this, it's more convenient than the previous interaction method since you can use tab completion for the methods as well."),(0,r.kt)("p",null,"Beaker console is also allowed to deploy contract, so that you don't another terminal tab to do so."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},".deploy counter -- --signer-account test1 --raw '{ \"count\": 999 }'\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".build"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".storeCode"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".instantiate")," commands are also available and has the same options as Beaker cli command, except that ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-wasm-opt")," are in by default since it is being intended to use in the development phase."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".help")," to see all available commands."),(0,r.kt)("p",null,"Apart from that, in the console, you can access Beaker's state, configuration and sdk from ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"conf")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk")," variables accordingly."),(0,r.kt)("h3",{id:"typescript-sdk-generation"},"Typescript SDK Generation"),(0,r.kt)("p",null,"Beaker leverage ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cosmwasm-typescript-gen"},"cosmwasm-typescript-gen")," to generate typescript client for cosmwasm contract. By default, Beaker's template prepare ",(0,r.kt)("inlineCode",{parentName:"p"},"ts/sdk")," directory where typescript compiler and bundler are setup, so the generated client definition could be used by ",(0,r.kt)("inlineCode",{parentName:"p"},"beaker-console"),", frontend or published as library for others to use."),(0,r.kt)("p",null,"To generate sdk for contract, run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm ts-gen counter # replace `counter` with any of contract name\n")),(0,r.kt)("p",null,"With this a package is available in ",(0,r.kt)("inlineCode",{parentName:"p"},"ts/sdk")," with name ",(0,r.kt)("inlineCode",{parentName:"p"},"<project-name>-sdk")," which can be used by any node / js / ts project."),(0,r.kt)("p",null,"Let's try adding ",(0,r.kt)("inlineCode",{parentName:"p"},"multiply")," method to our contract and see how this works."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// msg.rs\n\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n    Increment {},\n    Multiply { times: i32 }, // [1] add this enum variant\n    Reset { count: i32 },\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// contract.rs\n\n#[cfg_attr(not(feature = "library"), entry_point)]\npub fn execute(\n    deps: DepsMut,\n    _env: Env,\n    info: MessageInfo,\n    msg: ExecuteMsg,\n) -> Result<Response, ContractError> {\n    match msg {\n        ExecuteMsg::Increment {} => try_increment(deps),\n        ExecuteMsg::Multiply { times } => try_multiply(deps, times), // [2] add this match arm\n        ExecuteMsg::Reset { count } => try_reset(deps, info, count),\n    }\n}\n\n// [3] add this function\nfn try_multiply(deps: DepsMut, times: i32) -> Result<Response, ContractError> {\n    STATE.update(deps.storage, |mut state| -> Result<_, ContractError> {\n        state.count *= times;\n        Ok(state)\n    })?;\n\n    Ok(Response::new().add_attribute("method", "try_multiply"))\n}\n')),(0,r.kt)("p",null,"Then redeploy the contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm deploy counter --signer-account test1 --no-wasm-opt --raw '{ \"count\": 0 }'\n")),(0,r.kt)("p",null,"Then regenerate ",(0,r.kt)("inlineCode",{parentName:"p"},"counter"),"'s client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"beaker wasm ts-gen counter\n")),(0,r.kt)("p",null,"Now we can test it out in the ",(0,r.kt)("inlineCode",{parentName:"p"},"beaker console")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"sc = counter.signer(test1)\n\nawait sc.increment()\nawait sc.getCount()\n// => { count: 1 }\n\nawait sc.multiply({ times: 2 })\nawait sc.getCount()\n// => { count: 2 }\n\nawait sc.multiply({ times: 10 })\nawait sc.getCount()\n// => { count: 20 }\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sc")," is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"CounterContract")," which you can find it in ",(0,r.kt)("inlineCode",{parentName:"p"},"ts/sdk/src/contracts/CounterContract.ts"),"."),(0,r.kt)("h3",{id:"frontend"},"Frontend"),(0,r.kt)("p",null,"Beaker project template also comes with frontend template. But in order to interact with it you need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.keplr.app/"},"Keplr installed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/osmosis-labs/LocalOsmosis/tree/main/localKeplr"},"Keplr chain setup for LocalOsmosis")),(0,r.kt)("li",{parentName:"ul"},"Add test account to Keplr",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://help.keplr.app/articles/how-to-connect-additional-keplr-accounts"},"Add account via mnemonic in Keplr"),".\nThe account ",(0,r.kt)("inlineCode",{parentName:"li"},"test1")," can be added by copy-pasting ",(0,r.kt)("inlineCode",{parentName:"li"},"notice oak worry limit wrap speak medal online prefer cluster roof addict wrist behave treat actual wasp year salad speed social layer crew genius")," to the Import account screen on Keplr. It contains 100,000 test OSMOs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/osmosis-labs/LocalOsmosis#accounts"},"List of test accounts and its mnemonics in LocalOsmosis"))))),(0,r.kt)("p",null,"Now we are good to go! Let's dive in"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd frontend\nyarn && yarn dev\n")),(0,r.kt)("p",null,"Then open ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/")," in the browser."),(0,r.kt)("p",null,"In frontend directory, you will see that ",(0,r.kt)("inlineCode",{parentName:"p"},".beaker")," is in here. It is actually symlinked to the one in the root so that frontend code can access beaker state."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"license"},"License"),(0,r.kt)("p",null,"The crates in this repository are licensed under either of the following licenses, at your discretion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Apache License Version 2.0 (LICENSE-APACHE or apache.org license link)\nMIT license (LICENSE-MIT or opensource.org license link)\n")),(0,r.kt)("p",null,"Unless you explicitly state otherwise, any contribution submitted for inclusion in this library by you shall be dual licensed as above (as defined in the Apache v2 License), without any additional terms or conditions."))}m.isMDXComponent=!0}}]);
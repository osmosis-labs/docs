"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[8400],{3905:(e,t,s)=>{s.d(t,{Zo:()=>m,kt:()=>p});var o=s(67294);function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,o)}return s}function r(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){n(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function l(e,t){if(null==e)return{};var s,o,n=function(e,t){if(null==e)return{};var s,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)s=a[o],t.indexOf(s)>=0||(n[s]=e[s]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)s=a[o],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var i=o.createContext({}),u=function(e){var t=o.useContext(i),s=t;return e&&(s="function"==typeof e?e(t):r(r({},t),e)),s},m=function(e){var t=u(e.components);return o.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var s=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=u(s),p=n,v=d["".concat(i,".").concat(p)]||d[p]||c[p]||a;return s?o.createElement(v,r(r({ref:t},m),{},{components:s})):o.createElement(v,r({ref:t},m))}));function p(e,t){var s=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=s.length,r=new Array(a);r[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,r[1]=l;for(var u=2;u<a;u++)r[u]=s[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,s)}d.displayName="MDXCreateElement"},25017:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var o=s(87462),n=(s(67294),s(3905)),a=s(65488),r=s(85162);const l={},i="Running a Node on Mainnet",u={unversionedId:"validate/joining-mainnet",id:"validate/joining-mainnet",title:"Running a Node on Mainnet",description:"Osmosis Installer",source:"@site/docs/overview/validate/joining-mainnet.md",sourceDirName:"validate",slug:"/validate/joining-mainnet",permalink:"/overview/validate/joining-mainnet",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/overview/validate/joining-mainnet.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/overview/validate/"},next:{title:"Running a Node on Testnet",permalink:"/overview/validate/joining-testnet"}},m={},c=[{value:"Osmosis Installer",id:"osmosis-installer",level:2},{value:"Or Install Osmosis Binary manually",id:"or-install-osmosis-binary-manually",level:2},{value:"Initialize Osmosis Node",id:"initialize-osmosis-node",level:2},{value:"Latest Version (V10) Upgrade Info",id:"latest-version-v10-upgrade-info",level:2},{value:"Go Requirement",id:"go-requirement",level:3},{value:"Memory Requirements",id:"memory-requirements",level:3},{value:"Set Up Cosmovisor",id:"set-up-cosmovisor",level:3},{value:"Download Chain Data",id:"download-chain-data",level:2},{value:"Default",id:"default",level:3},{value:"Pruned",id:"pruned",level:3},{value:"Archive",id:"archive",level:3},{value:"Set Up Osmosis Service",id:"set-up-osmosis-service",level:2},{value:"Start Osmosis Service",id:"start-osmosis-service",level:2},{value:"Update Cosmovisor to V10",id:"update-cosmovisor-to-v10",level:2}],d={toc:c};function p(e){let{components:t,...l}=e;return(0,n.kt)("wrapper",(0,o.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"running-a-node-on-mainnet"},"Running a Node on Mainnet"),(0,n.kt)("h2",{id:"osmosis-installer"},"Osmosis Installer"),(0,n.kt)("p",null,"Join a network by using Osmosis Installer from ",(0,n.kt)("a",{parentName:"p",href:"https://get.osmosis.zone"},"https://get.osmosis.zone")," "),(0,n.kt)("p",null,(0,n.kt)("img",{src:s(24745).Z,width:"1420",height:"1140"})),(0,n.kt)("p",null,"Simply run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"curl -sL https://get.osmosis.zone/install > i.py && python3 i.py\n")),(0,n.kt)("h2",{id:"or-install-osmosis-binary-manually"},"Or Install Osmosis Binary manually"),(0,n.kt)("p",null,"Make sure you have ",(0,n.kt)("a",{parentName:"p",href:"../osmosis-core/osmosisd#minimum-requirements"},"installed the Osmosis Binary CLI")," prior to following the below instructions."),(0,n.kt)("h2",{id:"initialize-osmosis-node"},"Initialize Osmosis Node"),(0,n.kt)("p",null,"Use osmosisd to initialize your node (replace the ",(0,n.kt)("inlineCode",{parentName:"p"},"NODE_NAME")," with a name of your choosing):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd init NODE_NAME\n")),(0,n.kt)("p",null,"Download and place the genesis file in the osmosis config folder:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"wget -O ~/.osmosisd/config/genesis.json https://github.com/osmosis-labs/networks/raw/main/osmosis-1/genesis.json\n")),(0,n.kt)("h2",{id:"latest-version-v10-upgrade-info"},"Latest Version (V10) Upgrade Info"),(0,n.kt)("h3",{id:"go-requirement"},"Go Requirement"),(0,n.kt)("p",null,"You will need to be running go1.18 for this version of Osmosis. You can check if you are running go1.18 with the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-{.sh}"},"go version\n")),(0,n.kt)("p",null,"If this does not say go1.18, you need to upgrade/downgrade. One of the many ways to upgrade/downgrade to/from go 1.18 on linux is as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-{.sh}"},"wget -q -O - https://git.io/vQhTU | bash -s -- --remove\nwget -q -O - https://git.io/vQhTU | bash -s -- --version 1.18\n")),(0,n.kt)("h3",{id:"memory-requirements"},"Memory Requirements"),(0,n.kt)("p",null,"As always, we recommend having 64GB of memory. "),(0,n.kt)("h3",{id:"set-up-cosmovisor"},"Set Up Cosmovisor"),(0,n.kt)("p",null,"Set up cosmovisor to ensure any future upgrades happen flawlessly. To install Cosmovisor:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest\n")),(0,n.kt)("p",null,"(You may also refer to the Cosmovisor ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/tree/main/tools/cosmovisor#installation"},"installation instructions"),".)"),(0,n.kt)("p",null,"Create the required directories:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ~/.osmosisd/cosmovisor\nmkdir -p ~/.osmosisd/cosmovisor/genesis\nmkdir -p ~/.osmosisd/cosmovisor/genesis/bin\nmkdir -p ~/.osmosisd/cosmovisor/upgrades\n")),(0,n.kt)("p",null,"Set the environment variables:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'echo "# Setup Cosmovisor" >> ~/.profile\necho "export DAEMON_NAME=osmosisd" >> ~/.profile\necho "export DAEMON_HOME=$HOME/.osmosisd" >> ~/.profile\necho "export DAEMON_ALLOW_DOWNLOAD_BINARIES=false" >> ~/.profile\necho "export DAEMON_LOG_BUFFER_SIZE=512" >> ~/.profile\necho "export DAEMON_RESTART_AFTER_UPGRADE=true" >> ~/.profile\necho "export UNSAFE_SKIP_BACKUP=true" >> ~/.profile\nsource ~/.profile\n')),(0,n.kt)("p",null,"You may leave out ",(0,n.kt)("inlineCode",{parentName:"p"},"UNSAFE_SKIP_BACKUP=true"),", however the backup takes a decent amount of time and public snapshots of old states are available."),(0,n.kt)("p",null,"Copy the current osmosisd binary into the cosmovisor/genesis folder:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cp $GOPATH/bin/osmosisd ~/.osmosisd/cosmovisor/genesis/bin\n")),(0,n.kt)("p",null,"To check your work, ensure the version of cosmovisor and osmosisd are the same:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cosmovisor version\nosmosisd version\n")),(0,n.kt)("h2",{id:"download-chain-data"},"Download Chain Data"),(0,n.kt)("p",null,"Download the latest chain data from a snapshot provider. In the following commands, I will use ",(0,n.kt)("a",{href:"https://quicksync.io/networks/osmosis.html",target:"_blank"},(0,n.kt)("a",{parentName:"p",href:"https://quicksync.io/networks/osmosis.html"},"https://quicksync.io/networks/osmosis.html"))," to download the chain data. You may choose the default, pruned, or archive based on your needs."),(0,n.kt)("p",null,"Download liblz4-tool to handle the compressed file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install wget liblz4-tool aria2 -y\n")),(0,n.kt)("p",null,"Download the chain data:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Select the tab to the desired node type (Default, Pruned, or Archive)"),(0,n.kt)("li",{parentName:"ul"},"Select the tab to the region closest to you (Netherlands, Singapore, or San Francisco) and copy the commands")),(0,n.kt)("h3",{id:"default"},"Default"),(0,n.kt)(a.Z,{mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"netherlands",label:"Netherlands",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmosis-1-default")|select (.mirror=="Netherlands")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n'))),(0,n.kt)(r.Z,{value:"singapore",label:"Singapore",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmosis-1-default")|select (.mirror=="Singapore")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n'))),(0,n.kt)(r.Z,{value:"sanfrancisco",label:"San Francisco",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmosis-1-default")|select (.mirror=="SanFrancisco")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n')))),(0,n.kt)("h3",{id:"pruned"},"Pruned"),(0,n.kt)(a.Z,{mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"netherlands",label:"Netherlands",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmosis-1-pruned")|select (.mirror=="Netherlands")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n'))),(0,n.kt)(r.Z,{value:"singapore",label:"Singapore",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmosis-1-pruned")|select (.mirror=="Singapore")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n'))),(0,n.kt)(r.Z,{value:"sanfrancisco",label:"San Francisco",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmosis-1-pruned")|select (.mirror=="SanFrancisco")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n')))),(0,n.kt)("h3",{id:"archive"},"Archive"),(0,n.kt)(a.Z,{mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"netherlands",label:"Netherlands",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'URL=`curl https://quicksync.io/osmosis.json|jq -r \'.[] |select(.file=="osmosis-1-archive")|select (.mirror=="Netherlands")|.url\'`\ncd $HOME/.osmosisd/\nwget -O - $URL | lz4 -d | tar -xvf -\n')))),(0,n.kt)("h2",{id:"set-up-osmosis-service"},"Set Up Osmosis Service"),(0,n.kt)("p",null,"Set up a service to allow cosmovisor to run in the background as well as restart automatically if it runs into any problems:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'echo "[Unit]\nDescription=Cosmovisor daemon\nAfter=network-online.target\n[Service]\nEnvironment="DAEMON_NAME=osmosisd"\nEnvironment="DAEMON_HOME=${HOME}/.osmosisd"\nEnvironment="DAEMON_RESTART_AFTER_UPGRADE=true"\nEnvironment="DAEMON_ALLOW_DOWNLOAD_BINARIES=false"\nEnvironment="DAEMON_LOG_BUFFER_SIZE=512"\nEnvironment="UNSAFE_SKIP_BACKUP=true"\nUser=$USER\nExecStart=${HOME}/go/bin/cosmovisor run start\nRestart=always\nRestartSec=3\nLimitNOFILE=infinity\nLimitNPROC=infinity\n[Install]\nWantedBy=multi-user.target\n" >cosmovisor.service\n')),(0,n.kt)("p",null,"Move this new file to the systemd directory:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mv cosmovisor.service /etc/systemd/system/cosmovisor.service\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Previously, this documentation suggested to move the systemd unit file to:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre"},"/lib/systemd/system/cosmovisor.service\n")),(0,n.kt)("p",{parentName:"admonition"},"If dealing with a server that may have followed older instructions, you may consider looking there.")),(0,n.kt)("h2",{id:"start-osmosis-service"},"Start Osmosis Service"),(0,n.kt)("p",null,"Reload and start the service:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl restart systemd-journald\nsudo systemctl start cosmovisor\n")),(0,n.kt)("p",null,"Check the status of the service:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl status cosmovisor\n")),(0,n.kt)("p",null,"To see live logs of the service:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"journalctl -u cosmovisor -f\n")),(0,n.kt)("h2",{id:"update-cosmovisor-to-v10"},"Update Cosmovisor to V10"),(0,n.kt)("p",null,"If you want osmosisd to upgrade automatically from V9 to V10, do the following steps prior to the upgrade height (4713065):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-{.sh}"},"mkdir -p ~/.osmosisd/cosmovisor/upgrades/v9/bin\ncd $HOME/osmosis\ngit pull\ngit checkout v10.0.0\nmake build\ncp build/osmosisd ~/.osmosisd/cosmovisor/upgrades/v9/bin\n")))}p.isMDXComponent=!0},85162:(e,t,s)=>{s.d(t,{Z:()=>r});var o=s(67294),n=s(86010);const a="tabItem_Ymn6";function r(e){let{children:t,hidden:s,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,n.Z)(a,r),hidden:s},t)}},65488:(e,t,s)=>{s.d(t,{Z:()=>p});var o=s(87462),n=s(67294),a=s(86010),r=s(72389),l=s(67392),i=s(7094),u=s(12466);const m="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:s,defaultValue:r,values:d,groupId:p,className:v}=e,h=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??h.map((e=>{let{props:{value:t,label:s,attributes:o}}=e;return{value:t,label:s,attributes:o}})),k=(0,l.l)(g,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===r?r:r??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==f&&!g.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:y}=(0,i.U)(),[N,O]=(0,n.useState)(f),w=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=p){const e=b[p];null!=e&&e!==N&&g.some((t=>t.value===e))&&O(e)}const T=e=>{const t=e.currentTarget,s=w.indexOf(t),o=g[s].value;o!==N&&(E(t),O(o),null!=p&&y(p,String(o)))},S=e=>{let t=null;switch(e.key){case"ArrowRight":{const s=w.indexOf(e.currentTarget)+1;t=w[s]??w[0];break}case"ArrowLeft":{const s=w.indexOf(e.currentTarget)-1;t=w[s]??w[w.length-1];break}}t?.focus()};return n.createElement("div",{className:(0,a.Z)("tabs-container",m)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":s},v)},g.map((e=>{let{value:t,label:s,attributes:r}=e;return n.createElement("li",(0,o.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>w.push(e),onKeyDown:S,onFocus:T,onClick:T},r,{className:(0,a.Z)("tabs__item",c,r?.className,{"tabs__item--active":N===t})}),s??t)}))),t?(0,n.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function p(e){const t=(0,r.Z)();return n.createElement(d,(0,o.Z)({key:String(t)},e))}},24745:(e,t,s)=>{s.d(t,{Z:()=>o});const o=s.p+"assets/images/installer_11-e276ada29465c2eae1906b076939bc0f.png"}}]);